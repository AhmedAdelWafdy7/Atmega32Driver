
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000be6  00000c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007a  0080007a  00000c94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a02  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca0  00000000  00000000  000028ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc3  00000000  00000000  0000358e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00004554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e1  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d08  00000000  00000000  00005479  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_10>
  2c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_11>
  30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_12>
  34:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  8a:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_kick>:
	if(line == 0){
		if(pos <16 && pos>=0){
			lcd_send_command(0x80+pos);
		}else if(line == 1){
			if(pos <16 && pos>=0){
				lcd_send_command(0x80+pos);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <lcd_kick+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_kick+0x1a>
  ac:	00 00       	nop
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <lcd_is_busy>:
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	1a ba       	out	0x1a, r1	; 26
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	88 bb       	out	0x18, r24	; 24
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

000000d6 <lcd_send_command>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_is_busy>
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	9c 2f       	mov	r25, r28
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	30 e1       	ldi	r19, 0x10	; 16
  f8:	c3 9f       	mul	r28, r19
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	92 2f       	mov	r25, r18
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	89 2b       	or	r24, r25
 104:	8b bb       	out	0x1b, r24	; 27
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_send_char>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	9c 2f       	mov	r25, r28
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	89 2b       	or	r24, r25
 122:	8b bb       	out	0x1b, r24	; 27
 124:	88 b3       	in	r24, 0x18	; 24
 126:	82 60       	ori	r24, 0x02	; 2
 128:	88 bb       	out	0x18, r24	; 24
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	88 bb       	out	0x18, r24	; 24
 130:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 134:	2b b3       	in	r18, 0x1b	; 27
 136:	30 e1       	ldi	r19, 0x10	; 16
 138:	c3 9f       	mul	r28, r19
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	92 2f       	mov	r25, r18
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	89 2b       	or	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
 146:	88 b3       	in	r24, 0x18	; 24
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	88 bb       	out	0x18, r24	; 24
 152:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_clear>:
	}
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CLEAR);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 160:	08 95       	ret

00000162 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0xa>
 16c:	00 00       	nop
	
}
void lcd_init(void)
{
	_delay_ms(20);
	LCD_CTRL_dir_PORT |= (1<<EN | 1<<RW |1<<RS );
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	8e 60       	ori	r24, 0x0E	; 14
 172:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(1<<EN | 1<<RW |1<<RS );
 174:	88 b3       	in	r24, 0x18	; 24
 176:	81 7f       	andi	r24, 0xF1	; 241
 178:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_dir_PORT = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x20>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x26>
 188:	00 00       	nop
	_delay_ms(20);
	
	lcd_clear();
 18a:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
	#ifdef EIGHT_BIT_MODE
		lcd_send_command(LCD_8BIT_MODE_2_LINE);
#endif

	#ifdef FOUR_BIT_MODE
		lcd_send_command(0x02);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
		lcd_send_command(LCD_4BIT_MODE_2_LINE);
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	#endif
	lcd_send_command(LCD_ENTERY_MODE_INC_SHIFT_OFF);
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	lcd_send_command(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_ON);
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 1ac:	08 95       	ret

000001ae <lcd_send_string>:
			LCD_CTRL &= ~(1<<RW);
			lcd_kick();
		#endif
}
void lcd_send_string(unsigned char* The_char)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	int count=0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	while(*The_char){
 1bc:	17 c0       	rjmp	.+46     	; 0x1ec <lcd_send_string+0x3e>
		lcd_send_char(*The_char++);
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_send_char>
		count++;
 1c6:	21 96       	adiw	r28, 0x01	; 1
		if(count == 16){
 1c8:	c0 31       	cpi	r28, 0x10	; 16
 1ca:	d1 05       	cpc	r29, r1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <lcd_send_string+0x28>
			lcd_send_command(LCD_BEGIN_AT_SECOND_RAW);
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 1d4:	0b c0       	rjmp	.+22     	; 0x1ec <lcd_send_string+0x3e>
		}
		else if( count == 32 || count == 33){
 1d6:	ce 01       	movw	r24, r28
 1d8:	80 97       	sbiw	r24, 0x20	; 32
 1da:	02 97       	sbiw	r24, 0x02	; 2
 1dc:	38 f4       	brcc	.+14     	; 0x1ec <lcd_send_string+0x3e>
			lcd_clear();
 1de:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
			lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
			count = 0;
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
		#endif
}
void lcd_send_string(unsigned char* The_char)
{
	int count=0;
	while(*The_char){
 1ec:	f8 01       	movw	r30, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	81 11       	cpse	r24, r1
 1f2:	e5 cf       	rjmp	.-54     	; 0x1be <lcd_send_string+0x10>
			lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
			count = 0;
		}
	}
	
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <lcd_send_number>:
void lcd_clear(void)
{
	lcd_send_command(LCD_CLEAR);
	}
void lcd_send_number(int number)
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	27 97       	sbiw	r28, 0x07	; 7
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	char str[7];
	sprintf(str,"%d",number);
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	8e 01       	movw	r16, r28
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	1f 93       	push	r17
 22a:	0f 93       	push	r16
 22c:	0e 94 07 03 	call	0x60e	; 0x60e <sprintf>
	lcd_send_string(str);	
 230:	c8 01       	movw	r24, r16
 232:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
	
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	27 96       	adiw	r28, 0x07	; 7
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <main>:

uint32_t ADC_Data;
uint32_t Temp;

int main(void)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	27 97       	sbiw	r28, 0x07	; 7
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 26c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_init>
	ADC_Config_t adc_cfg;
	adc_cfg.ADC_Mode =ADC_MODE_SINGLE_CONVERSION;
 270:	19 82       	std	Y+1, r1	; 0x01
	adc_cfg.ADC_Prescaler = ADC_PRESCALER_64;
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	8c 83       	std	Y+4, r24	; 0x04
	adc_cfg.ADC_Res_presentation = ADC_RES_PRESENTATION_LEFT_ADJUSTED;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	8b 83       	std	Y+3, r24	; 0x03
	adc_cfg.ADC_Volt_Ref = ADC_VOLT_REF_AVCC;
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	8a 83       	std	Y+2, r24	; 0x02
	adc_cfg.ADC_IRQ_Enable = ADC_IRQ_ENABLE_NONE;
 27e:	1d 82       	std	Y+5, r1	; 0x05
	adc_cfg.P_CallBack = NULL;
 280:	1f 82       	std	Y+7, r1	; 0x07
 282:	1e 82       	std	Y+6, r1	; 0x06
	
	MCAL_ADC_Init(&adc_cfg);
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_ADC_Init>
	while(1){
	MCAL_ADC_Get_Result(ADC1,&ADC_Data,ADC_ENABLE);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	62 e8       	ldi	r22, 0x82	; 130
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 c4 01 	call	0x388	; 0x388 <MCAL_ADC_Get_Result>
	Temp  =(((ADC_Data *5000) / 1024) /10);
 298:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <ADC_Data>
 29c:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <ADC_Data+0x1>
 2a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <ADC_Data+0x2>
 2a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <ADC_Data+0x3>
 2a8:	a8 e8       	ldi	r26, 0x88	; 136
 2aa:	b3 e1       	ldi	r27, 0x13	; 19
 2ac:	0e 94 ed 02 	call	0x5da	; 0x5da <__muluhisi3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	38 e2       	ldi	r19, 0x28	; 40
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	0e 94 cb 02 	call	0x596	; 0x596 <__udivmodsi4>
 2bc:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <Temp>
 2c0:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <Temp+0x1>
 2c4:	40 93 80 00 	sts	0x0080, r20	; 0x800080 <Temp+0x2>
 2c8:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <Temp+0x3>
	lcd_send_string("Temp: ");
 2cc:	8f e6       	ldi	r24, 0x6F	; 111
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
	lcd_send_number(Temp);
 2d4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Temp>
 2d8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Temp+0x1>
 2dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_send_number>
	lcd_send_string(" C");
 2e0:	86 e7       	ldi	r24, 0x76	; 118
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	89 e6       	ldi	r24, 0x69	; 105
 2ec:	98 e1       	ldi	r25, 0x18	; 24
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x96>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0xa0>
 2f8:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 2fa:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
 2fe:	c6 cf       	rjmp	.-116    	; 0x28c <main+0x34>

00000300 <MCAL_ADC_Init>:
	}
}
void MCAL_ADC_DeInit(void){
	ADMUX = 0x0;
	ADCSRA =0x0;
	SFIOR &= ~(1<<5 | 1<<6 | 1<<7);
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	fe 01       	movw	r30, r28
 30a:	a6 e8       	ldi	r26, 0x86	; 134
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	8a 95       	dec	r24
 314:	e1 f7       	brne	.-8      	; 0x30e <MCAL_ADC_Init+0xe>
 316:	96 b1       	in	r25, 0x06	; 6
 318:	88 81       	ld	r24, Y
 31a:	89 2b       	or	r24, r25
 31c:	86 b9       	out	0x06, r24	; 6
 31e:	96 b1       	in	r25, 0x06	; 6
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	89 2b       	or	r24, r25
 324:	86 b9       	out	0x06, r24	; 6
 326:	97 b1       	in	r25, 0x07	; 7
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	89 2b       	or	r24, r25
 32c:	87 b9       	out	0x07, r24	; 7
 32e:	97 b1       	in	r25, 0x07	; 7
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	89 2b       	or	r24, r25
 334:	87 b9       	out	0x07, r24	; 7
 336:	97 b1       	in	r25, 0x07	; 7
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	89 2b       	or	r24, r25
 33c:	87 b9       	out	0x07, r24	; 7
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	19 f4       	brne	.+6      	; 0x34a <MCAL_ADC_Init+0x4a>
 344:	8f b7       	in	r24, 0x3f	; 63
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8f bf       	out	0x3f, r24	; 63
 34a:	86 b1       	in	r24, 0x06	; 6
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	86 b9       	out	0x06, r24	; 6
 350:	28 81       	ld	r18, Y
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	46 b1       	in	r20, 0x06	; 6
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <MCAL_ADC_Init+0x60>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	4a 95       	dec	r20
 362:	e2 f7       	brpl	.-8      	; 0x35c <MCAL_ADC_Init+0x5c>
 364:	99 27       	eor	r25, r25
 366:	28 17       	cp	r18, r24
 368:	39 07       	cpc	r19, r25
 36a:	19 f4       	brne	.+6      	; 0x372 <MCAL_ADC_Init+0x72>
 36c:	86 b1       	in	r24, 0x06	; 6
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	86 b9       	out	0x06, r24	; 6
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <MCAL_ADC_Start_Conversion>:
}

void MCAL_ADC_Start_Conversion(void){
	if(G_ADC_Config.ADC_Mode == ADC_MODE_SINGLE_CONVERSION){
 378:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <G_ADC_Config>
 37c:	81 11       	cpse	r24, r1
 37e:	03 c0       	rjmp	.+6      	; 0x386 <MCAL_ADC_Start_Conversion+0xe>
		SET_BIT(ADCSRA,6);
 380:	86 b1       	in	r24, 0x06	; 6
 382:	80 64       	ori	r24, 0x40	; 64
 384:	86 b9       	out	0x06, r24	; 6
 386:	08 95       	ret

00000388 <MCAL_ADC_Get_Result>:
	}
}
void MCAL_ADC_Get_Result(Channel_Select_t channel,uint16_t *data,Polling_Mechanism_t polling){
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	eb 01       	movw	r28, r22
 390:	14 2f       	mov	r17, r20
	ADMUX &= ~(0x1F);
 392:	97 b1       	in	r25, 0x07	; 7
 394:	90 7e       	andi	r25, 0xE0	; 224
 396:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (uint8_t)channel;
 398:	97 b1       	in	r25, 0x07	; 7
 39a:	98 2b       	or	r25, r24
 39c:	97 b9       	out	0x07, r25	; 7
	CLEAR_BIT(DDRA,channel);
 39e:	4a b3       	in	r20, 0x1a	; 26
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <MCAL_ADC_Get_Result+0x24>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <MCAL_ADC_Get_Result+0x20>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	8a bb       	out	0x1a, r24	; 26
	MCAL_ADC_Start_Conversion();
 3b8:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_ADC_Start_Conversion>
	
	if(polling == ADC_ENABLE){
 3bc:	11 11       	cpse	r17, r1
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MCAL_ADC_Get_Result+0x3c>
		while(!READ_BIT(ADCSRA,4));
 3c0:	34 9b       	sbis	0x06, 4	; 6
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <MCAL_ADC_Get_Result+0x38>
	}
	if(G_ADC_Config.ADC_Res_presentation == ADC_RES_PRESENTATION_RIGHT_ADJUSTED){
 3c4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <G_ADC_Config+0x2>
 3c8:	81 11       	cpse	r24, r1
 3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <MCAL_ADC_Get_Result+0x58>
		*data = (ADCL | ((ADCH & (0x03)) <<8 ));
 3cc:	24 b1       	in	r18, 0x04	; 4
 3ce:	85 b1       	in	r24, 0x05	; 5
 3d0:	83 70       	andi	r24, 0x03	; 3
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	98 2f       	mov	r25, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	82 2b       	or	r24, r18
 3da:	99 83       	std	Y+1, r25	; 0x01
 3dc:	88 83       	st	Y, r24
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <MCAL_ADC_Get_Result+0x74>
	}
	else{
		*data = ((ADCL & (0xC0)) >>6)  | (ADCH << 2);
 3e0:	24 b1       	in	r18, 0x04	; 4
 3e2:	22 95       	swap	r18
 3e4:	26 95       	lsr	r18
 3e6:	26 95       	lsr	r18
 3e8:	23 70       	andi	r18, 0x03	; 3
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	82 2b       	or	r24, r18
 3f8:	99 83       	std	Y+1, r25	; 0x01
 3fa:	88 83       	st	Y, r24
	}
	CLEAR_BIT(ADCSRA, 4);
 3fc:	86 b1       	in	r24, 0x06	; 6
 3fe:	8f 7e       	andi	r24, 0xEF	; 239
 400:	86 b9       	out	0x06, r24	; 6

}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	08 95       	ret

0000040a <__vector_12>:

	*data = SPI->SPDR ;
}

ISR(SPI_STC_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 42c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 430:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 434:	00 88       	ldd	r0, Z+16	; 0x10
 436:	f1 89       	ldd	r31, Z+17	; 0x11
 438:	e0 2d       	mov	r30, r0
 43a:	09 95       	icall
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_11>:
		OCR0 = (uint8_t)(255 - Duty_Cycle);
	}
}

ISR(TIMER0_OVF_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	GP_IRQ_CallBack();
 480:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <GP_IRQ_CallBack>
 484:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <GP_IRQ_CallBack+0x1>
 488:	09 95       	icall
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	GP_IRQ_CallBack();
 4ce:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <GP_IRQ_CallBack>
 4d2:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <GP_IRQ_CallBack+0x1>
 4d6:	09 95       	icall
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect)
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
	GP_IRQ_CallBack();
 51c:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <GP_IRQ_CallBack>
 520:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <GP_IRQ_CallBack+0x1>
 524:	09 95       	icall
}
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__vector_15>:

ISR(USART_TXC_vect)
{
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
	GP_IRQ_CallBack();
 56a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <GP_IRQ_CallBack>
 56e:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <GP_IRQ_CallBack+0x1>
 572:	09 95       	icall
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__udivmodsi4>:
 596:	a1 e2       	ldi	r26, 0x21	; 33
 598:	1a 2e       	mov	r1, r26
 59a:	aa 1b       	sub	r26, r26
 59c:	bb 1b       	sub	r27, r27
 59e:	fd 01       	movw	r30, r26
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__udivmodsi4_ep>

000005a2 <__udivmodsi4_loop>:
 5a2:	aa 1f       	adc	r26, r26
 5a4:	bb 1f       	adc	r27, r27
 5a6:	ee 1f       	adc	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	a2 17       	cp	r26, r18
 5ac:	b3 07       	cpc	r27, r19
 5ae:	e4 07       	cpc	r30, r20
 5b0:	f5 07       	cpc	r31, r21
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__udivmodsi4_ep>
 5b4:	a2 1b       	sub	r26, r18
 5b6:	b3 0b       	sbc	r27, r19
 5b8:	e4 0b       	sbc	r30, r20
 5ba:	f5 0b       	sbc	r31, r21

000005bc <__udivmodsi4_ep>:
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	1a 94       	dec	r1
 5c6:	69 f7       	brne	.-38     	; 0x5a2 <__udivmodsi4_loop>
 5c8:	60 95       	com	r22
 5ca:	70 95       	com	r23
 5cc:	80 95       	com	r24
 5ce:	90 95       	com	r25
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	bd 01       	movw	r22, r26
 5d6:	cf 01       	movw	r24, r30
 5d8:	08 95       	ret

000005da <__muluhisi3>:
 5da:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__umulhisi3>
 5de:	a5 9f       	mul	r26, r21
 5e0:	90 0d       	add	r25, r0
 5e2:	b4 9f       	mul	r27, r20
 5e4:	90 0d       	add	r25, r0
 5e6:	a4 9f       	mul	r26, r20
 5e8:	80 0d       	add	r24, r0
 5ea:	91 1d       	adc	r25, r1
 5ec:	11 24       	eor	r1, r1
 5ee:	08 95       	ret

000005f0 <__umulhisi3>:
 5f0:	a2 9f       	mul	r26, r18
 5f2:	b0 01       	movw	r22, r0
 5f4:	b3 9f       	mul	r27, r19
 5f6:	c0 01       	movw	r24, r0
 5f8:	a3 9f       	mul	r26, r19
 5fa:	70 0d       	add	r23, r0
 5fc:	81 1d       	adc	r24, r1
 5fe:	11 24       	eor	r1, r1
 600:	91 1d       	adc	r25, r1
 602:	b2 9f       	mul	r27, r18
 604:	70 0d       	add	r23, r0
 606:	81 1d       	adc	r24, r1
 608:	11 24       	eor	r1, r1
 60a:	91 1d       	adc	r25, r1
 60c:	08 95       	ret

0000060e <sprintf>:
 60e:	ae e0       	ldi	r26, 0x0E	; 14
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ed e0       	ldi	r30, 0x0D	; 13
 614:	f3 e0       	ldi	r31, 0x03	; 3
 616:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__prologue_saves__+0x1c>
 61a:	0d 89       	ldd	r16, Y+21	; 0x15
 61c:	1e 89       	ldd	r17, Y+22	; 0x16
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	8c 83       	std	Y+4, r24	; 0x04
 622:	1a 83       	std	Y+2, r17	; 0x02
 624:	09 83       	std	Y+1, r16	; 0x01
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	9f e7       	ldi	r25, 0x7F	; 127
 62a:	9e 83       	std	Y+6, r25	; 0x06
 62c:	8d 83       	std	Y+5, r24	; 0x05
 62e:	ae 01       	movw	r20, r28
 630:	47 5e       	subi	r20, 0xE7	; 231
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	6f 89       	ldd	r22, Y+23	; 0x17
 636:	78 8d       	ldd	r23, Y+24	; 0x18
 638:	ce 01       	movw	r24, r28
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	0e 94 29 03 	call	0x652	; 0x652 <vfprintf>
 640:	ef 81       	ldd	r30, Y+7	; 0x07
 642:	f8 85       	ldd	r31, Y+8	; 0x08
 644:	e0 0f       	add	r30, r16
 646:	f1 1f       	adc	r31, r17
 648:	10 82       	st	Z, r1
 64a:	2e 96       	adiw	r28, 0x0e	; 14
 64c:	e4 e0       	ldi	r30, 0x04	; 4
 64e:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__epilogue_restores__+0x1c>

00000652 <vfprintf>:
 652:	ab e0       	ldi	r26, 0x0B	; 11
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ef e2       	ldi	r30, 0x2F	; 47
 658:	f3 e0       	ldi	r31, 0x03	; 3
 65a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__prologue_saves__>
 65e:	6c 01       	movw	r12, r24
 660:	7b 01       	movw	r14, r22
 662:	8a 01       	movw	r16, r20
 664:	fc 01       	movw	r30, r24
 666:	17 82       	std	Z+7, r1	; 0x07
 668:	16 82       	std	Z+6, r1	; 0x06
 66a:	83 81       	ldd	r24, Z+3	; 0x03
 66c:	81 ff       	sbrs	r24, 1
 66e:	cc c1       	rjmp	.+920    	; 0xa08 <__stack+0x1a9>
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	3c 01       	movw	r6, r24
 676:	f6 01       	movw	r30, r12
 678:	93 81       	ldd	r25, Z+3	; 0x03
 67a:	f7 01       	movw	r30, r14
 67c:	93 fd       	sbrc	r25, 3
 67e:	85 91       	lpm	r24, Z+
 680:	93 ff       	sbrs	r25, 3
 682:	81 91       	ld	r24, Z+
 684:	7f 01       	movw	r14, r30
 686:	88 23       	and	r24, r24
 688:	09 f4       	brne	.+2      	; 0x68c <vfprintf+0x3a>
 68a:	ba c1       	rjmp	.+884    	; 0xa00 <__stack+0x1a1>
 68c:	85 32       	cpi	r24, 0x25	; 37
 68e:	39 f4       	brne	.+14     	; 0x69e <vfprintf+0x4c>
 690:	93 fd       	sbrc	r25, 3
 692:	85 91       	lpm	r24, Z+
 694:	93 ff       	sbrs	r25, 3
 696:	81 91       	ld	r24, Z+
 698:	7f 01       	movw	r14, r30
 69a:	85 32       	cpi	r24, 0x25	; 37
 69c:	29 f4       	brne	.+10     	; 0x6a8 <vfprintf+0x56>
 69e:	b6 01       	movw	r22, r12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 6a6:	e7 cf       	rjmp	.-50     	; 0x676 <vfprintf+0x24>
 6a8:	91 2c       	mov	r9, r1
 6aa:	21 2c       	mov	r2, r1
 6ac:	31 2c       	mov	r3, r1
 6ae:	ff e1       	ldi	r31, 0x1F	; 31
 6b0:	f3 15       	cp	r31, r3
 6b2:	d8 f0       	brcs	.+54     	; 0x6ea <vfprintf+0x98>
 6b4:	8b 32       	cpi	r24, 0x2B	; 43
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <vfprintf+0x84>
 6b8:	38 f4       	brcc	.+14     	; 0x6c8 <vfprintf+0x76>
 6ba:	80 32       	cpi	r24, 0x20	; 32
 6bc:	79 f0       	breq	.+30     	; 0x6dc <vfprintf+0x8a>
 6be:	83 32       	cpi	r24, 0x23	; 35
 6c0:	a1 f4       	brne	.+40     	; 0x6ea <vfprintf+0x98>
 6c2:	23 2d       	mov	r18, r3
 6c4:	20 61       	ori	r18, 0x10	; 16
 6c6:	1d c0       	rjmp	.+58     	; 0x702 <vfprintf+0xb0>
 6c8:	8d 32       	cpi	r24, 0x2D	; 45
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <vfprintf+0x92>
 6cc:	80 33       	cpi	r24, 0x30	; 48
 6ce:	69 f4       	brne	.+26     	; 0x6ea <vfprintf+0x98>
 6d0:	23 2d       	mov	r18, r3
 6d2:	21 60       	ori	r18, 0x01	; 1
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <vfprintf+0xb0>
 6d6:	83 2d       	mov	r24, r3
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	38 2e       	mov	r3, r24
 6dc:	e3 2d       	mov	r30, r3
 6de:	e4 60       	ori	r30, 0x04	; 4
 6e0:	3e 2e       	mov	r3, r30
 6e2:	2a c0       	rjmp	.+84     	; 0x738 <vfprintf+0xe6>
 6e4:	f3 2d       	mov	r31, r3
 6e6:	f8 60       	ori	r31, 0x08	; 8
 6e8:	1d c0       	rjmp	.+58     	; 0x724 <vfprintf+0xd2>
 6ea:	37 fc       	sbrc	r3, 7
 6ec:	2d c0       	rjmp	.+90     	; 0x748 <vfprintf+0xf6>
 6ee:	20 ed       	ldi	r18, 0xD0	; 208
 6f0:	28 0f       	add	r18, r24
 6f2:	2a 30       	cpi	r18, 0x0A	; 10
 6f4:	40 f0       	brcs	.+16     	; 0x706 <vfprintf+0xb4>
 6f6:	8e 32       	cpi	r24, 0x2E	; 46
 6f8:	b9 f4       	brne	.+46     	; 0x728 <vfprintf+0xd6>
 6fa:	36 fc       	sbrc	r3, 6
 6fc:	81 c1       	rjmp	.+770    	; 0xa00 <__stack+0x1a1>
 6fe:	23 2d       	mov	r18, r3
 700:	20 64       	ori	r18, 0x40	; 64
 702:	32 2e       	mov	r3, r18
 704:	19 c0       	rjmp	.+50     	; 0x738 <vfprintf+0xe6>
 706:	36 fe       	sbrs	r3, 6
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0xc4>
 70a:	8a e0       	ldi	r24, 0x0A	; 10
 70c:	98 9e       	mul	r9, r24
 70e:	20 0d       	add	r18, r0
 710:	11 24       	eor	r1, r1
 712:	92 2e       	mov	r9, r18
 714:	11 c0       	rjmp	.+34     	; 0x738 <vfprintf+0xe6>
 716:	ea e0       	ldi	r30, 0x0A	; 10
 718:	2e 9e       	mul	r2, r30
 71a:	20 0d       	add	r18, r0
 71c:	11 24       	eor	r1, r1
 71e:	22 2e       	mov	r2, r18
 720:	f3 2d       	mov	r31, r3
 722:	f0 62       	ori	r31, 0x20	; 32
 724:	3f 2e       	mov	r3, r31
 726:	08 c0       	rjmp	.+16     	; 0x738 <vfprintf+0xe6>
 728:	8c 36       	cpi	r24, 0x6C	; 108
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0xe2>
 72c:	83 2d       	mov	r24, r3
 72e:	80 68       	ori	r24, 0x80	; 128
 730:	38 2e       	mov	r3, r24
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0xe6>
 734:	88 36       	cpi	r24, 0x68	; 104
 736:	41 f4       	brne	.+16     	; 0x748 <vfprintf+0xf6>
 738:	f7 01       	movw	r30, r14
 73a:	93 fd       	sbrc	r25, 3
 73c:	85 91       	lpm	r24, Z+
 73e:	93 ff       	sbrs	r25, 3
 740:	81 91       	ld	r24, Z+
 742:	7f 01       	movw	r14, r30
 744:	81 11       	cpse	r24, r1
 746:	b3 cf       	rjmp	.-154    	; 0x6ae <vfprintf+0x5c>
 748:	98 2f       	mov	r25, r24
 74a:	9f 7d       	andi	r25, 0xDF	; 223
 74c:	95 54       	subi	r25, 0x45	; 69
 74e:	93 30       	cpi	r25, 0x03	; 3
 750:	28 f4       	brcc	.+10     	; 0x75c <vfprintf+0x10a>
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	9f e3       	ldi	r25, 0x3F	; 63
 758:	99 83       	std	Y+1, r25	; 0x01
 75a:	0d c0       	rjmp	.+26     	; 0x776 <vfprintf+0x124>
 75c:	83 36       	cpi	r24, 0x63	; 99
 75e:	31 f0       	breq	.+12     	; 0x76c <vfprintf+0x11a>
 760:	83 37       	cpi	r24, 0x73	; 115
 762:	71 f0       	breq	.+28     	; 0x780 <vfprintf+0x12e>
 764:	83 35       	cpi	r24, 0x53	; 83
 766:	09 f0       	breq	.+2      	; 0x76a <vfprintf+0x118>
 768:	59 c0       	rjmp	.+178    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 76a:	21 c0       	rjmp	.+66     	; 0x7ae <vfprintf+0x15c>
 76c:	f8 01       	movw	r30, r16
 76e:	80 81       	ld	r24, Z
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	0e 5f       	subi	r16, 0xFE	; 254
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	88 24       	eor	r8, r8
 778:	83 94       	inc	r8
 77a:	91 2c       	mov	r9, r1
 77c:	53 01       	movw	r10, r6
 77e:	13 c0       	rjmp	.+38     	; 0x7a6 <vfprintf+0x154>
 780:	28 01       	movw	r4, r16
 782:	f2 e0       	ldi	r31, 0x02	; 2
 784:	4f 0e       	add	r4, r31
 786:	51 1c       	adc	r5, r1
 788:	f8 01       	movw	r30, r16
 78a:	a0 80       	ld	r10, Z
 78c:	b1 80       	ldd	r11, Z+1	; 0x01
 78e:	36 fe       	sbrs	r3, 6
 790:	03 c0       	rjmp	.+6      	; 0x798 <vfprintf+0x146>
 792:	69 2d       	mov	r22, r9
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x14a>
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	7f ef       	ldi	r23, 0xFF	; 255
 79c:	c5 01       	movw	r24, r10
 79e:	0e 94 15 05 	call	0xa2a	; 0xa2a <strnlen>
 7a2:	4c 01       	movw	r8, r24
 7a4:	82 01       	movw	r16, r4
 7a6:	f3 2d       	mov	r31, r3
 7a8:	ff 77       	andi	r31, 0x7F	; 127
 7aa:	3f 2e       	mov	r3, r31
 7ac:	16 c0       	rjmp	.+44     	; 0x7da <vfprintf+0x188>
 7ae:	28 01       	movw	r4, r16
 7b0:	22 e0       	ldi	r18, 0x02	; 2
 7b2:	42 0e       	add	r4, r18
 7b4:	51 1c       	adc	r5, r1
 7b6:	f8 01       	movw	r30, r16
 7b8:	a0 80       	ld	r10, Z
 7ba:	b1 80       	ldd	r11, Z+1	; 0x01
 7bc:	36 fe       	sbrs	r3, 6
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x174>
 7c0:	69 2d       	mov	r22, r9
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x178>
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	7f ef       	ldi	r23, 0xFF	; 255
 7ca:	c5 01       	movw	r24, r10
 7cc:	0e 94 0a 05 	call	0xa14	; 0xa14 <strnlen_P>
 7d0:	4c 01       	movw	r8, r24
 7d2:	f3 2d       	mov	r31, r3
 7d4:	f0 68       	ori	r31, 0x80	; 128
 7d6:	3f 2e       	mov	r3, r31
 7d8:	82 01       	movw	r16, r4
 7da:	33 fc       	sbrc	r3, 3
 7dc:	1b c0       	rjmp	.+54     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7de:	82 2d       	mov	r24, r2
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	88 16       	cp	r8, r24
 7e4:	99 06       	cpc	r9, r25
 7e6:	b0 f4       	brcc	.+44     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7e8:	b6 01       	movw	r22, r12
 7ea:	80 e2       	ldi	r24, 0x20	; 32
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 7f2:	2a 94       	dec	r2
 7f4:	f4 cf       	rjmp	.-24     	; 0x7de <vfprintf+0x18c>
 7f6:	f5 01       	movw	r30, r10
 7f8:	37 fc       	sbrc	r3, 7
 7fa:	85 91       	lpm	r24, Z+
 7fc:	37 fe       	sbrs	r3, 7
 7fe:	81 91       	ld	r24, Z+
 800:	5f 01       	movw	r10, r30
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 80a:	21 10       	cpse	r2, r1
 80c:	2a 94       	dec	r2
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	82 1a       	sub	r8, r18
 812:	91 08       	sbc	r9, r1
 814:	81 14       	cp	r8, r1
 816:	91 04       	cpc	r9, r1
 818:	71 f7       	brne	.-36     	; 0x7f6 <vfprintf+0x1a4>
 81a:	e8 c0       	rjmp	.+464    	; 0x9ec <__stack+0x18d>
 81c:	84 36       	cpi	r24, 0x64	; 100
 81e:	11 f0       	breq	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	89 36       	cpi	r24, 0x69	; 105
 822:	41 f5       	brne	.+80     	; 0x874 <__stack+0x15>
 824:	f8 01       	movw	r30, r16
 826:	37 fe       	sbrs	r3, 7
 828:	07 c0       	rjmp	.+14     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	0c 5f       	subi	r16, 0xFC	; 252
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	08 c0       	rjmp	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	07 2e       	mov	r0, r23
 83e:	00 0c       	add	r0, r0
 840:	88 0b       	sbc	r24, r24
 842:	99 0b       	sbc	r25, r25
 844:	0e 5f       	subi	r16, 0xFE	; 254
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	f3 2d       	mov	r31, r3
 84a:	ff 76       	andi	r31, 0x6F	; 111
 84c:	3f 2e       	mov	r3, r31
 84e:	97 ff       	sbrs	r25, 7
 850:	09 c0       	rjmp	.+18     	; 0x864 <__stack+0x5>
 852:	90 95       	com	r25
 854:	80 95       	com	r24
 856:	70 95       	com	r23
 858:	61 95       	neg	r22
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	f0 68       	ori	r31, 0x80	; 128
 862:	3f 2e       	mov	r3, r31
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	a3 01       	movw	r20, r6
 86a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 86e:	88 2e       	mov	r8, r24
 870:	86 18       	sub	r8, r6
 872:	45 c0       	rjmp	.+138    	; 0x8fe <__stack+0x9f>
 874:	85 37       	cpi	r24, 0x75	; 117
 876:	31 f4       	brne	.+12     	; 0x884 <__stack+0x25>
 878:	23 2d       	mov	r18, r3
 87a:	2f 7e       	andi	r18, 0xEF	; 239
 87c:	b2 2e       	mov	r11, r18
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	25 c0       	rjmp	.+74     	; 0x8ce <__stack+0x6f>
 884:	93 2d       	mov	r25, r3
 886:	99 7f       	andi	r25, 0xF9	; 249
 888:	b9 2e       	mov	r11, r25
 88a:	8f 36       	cpi	r24, 0x6F	; 111
 88c:	c1 f0       	breq	.+48     	; 0x8be <__stack+0x5f>
 88e:	18 f4       	brcc	.+6      	; 0x896 <__stack+0x37>
 890:	88 35       	cpi	r24, 0x58	; 88
 892:	79 f0       	breq	.+30     	; 0x8b2 <__stack+0x53>
 894:	b5 c0       	rjmp	.+362    	; 0xa00 <__stack+0x1a1>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	19 f0       	breq	.+6      	; 0x8a0 <__stack+0x41>
 89a:	88 37       	cpi	r24, 0x78	; 120
 89c:	21 f0       	breq	.+8      	; 0x8a6 <__stack+0x47>
 89e:	b0 c0       	rjmp	.+352    	; 0xa00 <__stack+0x1a1>
 8a0:	e9 2f       	mov	r30, r25
 8a2:	e0 61       	ori	r30, 0x10	; 16
 8a4:	be 2e       	mov	r11, r30
 8a6:	b4 fe       	sbrs	r11, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__stack+0x65>
 8aa:	fb 2d       	mov	r31, r11
 8ac:	f4 60       	ori	r31, 0x04	; 4
 8ae:	bf 2e       	mov	r11, r31
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
 8b2:	34 fe       	sbrs	r3, 4
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <__stack+0x6b>
 8b6:	29 2f       	mov	r18, r25
 8b8:	26 60       	ori	r18, 0x06	; 6
 8ba:	b2 2e       	mov	r11, r18
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <__stack+0x6b>
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__stack+0x6f>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	20 e1       	ldi	r18, 0x10	; 16
 8cc:	32 e0       	ldi	r19, 0x02	; 2
 8ce:	f8 01       	movw	r30, r16
 8d0:	b7 fe       	sbrs	r11, 7
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__stack+0x83>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <__stack+0x8f>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 5f       	subi	r16, 0xFE	; 254
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	a3 01       	movw	r20, r6
 8f0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 8f4:	88 2e       	mov	r8, r24
 8f6:	86 18       	sub	r8, r6
 8f8:	fb 2d       	mov	r31, r11
 8fa:	ff 77       	andi	r31, 0x7F	; 127
 8fc:	3f 2e       	mov	r3, r31
 8fe:	36 fe       	sbrs	r3, 6
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0xbd>
 902:	23 2d       	mov	r18, r3
 904:	2e 7f       	andi	r18, 0xFE	; 254
 906:	a2 2e       	mov	r10, r18
 908:	89 14       	cp	r8, r9
 90a:	58 f4       	brcc	.+22     	; 0x922 <__stack+0xc3>
 90c:	34 fe       	sbrs	r3, 4
 90e:	0b c0       	rjmp	.+22     	; 0x926 <__stack+0xc7>
 910:	32 fc       	sbrc	r3, 2
 912:	09 c0       	rjmp	.+18     	; 0x926 <__stack+0xc7>
 914:	83 2d       	mov	r24, r3
 916:	8e 7e       	andi	r24, 0xEE	; 238
 918:	a8 2e       	mov	r10, r24
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0xc7>
 91c:	b8 2c       	mov	r11, r8
 91e:	a3 2c       	mov	r10, r3
 920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0xc9>
 922:	b8 2c       	mov	r11, r8
 924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0xc9>
 926:	b9 2c       	mov	r11, r9
 928:	a4 fe       	sbrs	r10, 4
 92a:	0f c0       	rjmp	.+30     	; 0x94a <__stack+0xeb>
 92c:	fe 01       	movw	r30, r28
 92e:	e8 0d       	add	r30, r8
 930:	f1 1d       	adc	r31, r1
 932:	80 81       	ld	r24, Z
 934:	80 33       	cpi	r24, 0x30	; 48
 936:	21 f4       	brne	.+8      	; 0x940 <__stack+0xe1>
 938:	9a 2d       	mov	r25, r10
 93a:	99 7e       	andi	r25, 0xE9	; 233
 93c:	a9 2e       	mov	r10, r25
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0xf3>
 940:	a2 fe       	sbrs	r10, 2
 942:	06 c0       	rjmp	.+12     	; 0x950 <__stack+0xf1>
 944:	b3 94       	inc	r11
 946:	b3 94       	inc	r11
 948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0xf3>
 94a:	8a 2d       	mov	r24, r10
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0xf3>
 950:	b3 94       	inc	r11
 952:	a3 fc       	sbrc	r10, 3
 954:	11 c0       	rjmp	.+34     	; 0x978 <__stack+0x119>
 956:	a0 fe       	sbrs	r10, 0
 958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x107>
 95a:	b2 14       	cp	r11, r2
 95c:	88 f4       	brcc	.+34     	; 0x980 <__stack+0x121>
 95e:	28 0c       	add	r2, r8
 960:	92 2c       	mov	r9, r2
 962:	9b 18       	sub	r9, r11
 964:	0e c0       	rjmp	.+28     	; 0x982 <__stack+0x123>
 966:	b2 14       	cp	r11, r2
 968:	60 f4       	brcc	.+24     	; 0x982 <__stack+0x123>
 96a:	b6 01       	movw	r22, r12
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 974:	b3 94       	inc	r11
 976:	f7 cf       	rjmp	.-18     	; 0x966 <__stack+0x107>
 978:	b2 14       	cp	r11, r2
 97a:	18 f4       	brcc	.+6      	; 0x982 <__stack+0x123>
 97c:	2b 18       	sub	r2, r11
 97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x125>
 980:	98 2c       	mov	r9, r8
 982:	21 2c       	mov	r2, r1
 984:	a4 fe       	sbrs	r10, 4
 986:	10 c0       	rjmp	.+32     	; 0x9a8 <__stack+0x149>
 988:	b6 01       	movw	r22, r12
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 992:	a2 fe       	sbrs	r10, 2
 994:	17 c0       	rjmp	.+46     	; 0x9c4 <__stack+0x165>
 996:	a1 fc       	sbrc	r10, 1
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <__stack+0x141>
 99a:	88 e7       	ldi	r24, 0x78	; 120
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0x145>
 9a0:	88 e5       	ldi	r24, 0x58	; 88
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	b6 01       	movw	r22, r12
 9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <__stack+0x161>
 9a8:	8a 2d       	mov	r24, r10
 9aa:	86 78       	andi	r24, 0x86	; 134
 9ac:	59 f0       	breq	.+22     	; 0x9c4 <__stack+0x165>
 9ae:	a1 fe       	sbrs	r10, 1
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0x157>
 9b2:	8b e2       	ldi	r24, 0x2B	; 43
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__stack+0x159>
 9b6:	80 e2       	ldi	r24, 0x20	; 32
 9b8:	a7 fc       	sbrc	r10, 7
 9ba:	8d e2       	ldi	r24, 0x2D	; 45
 9bc:	b6 01       	movw	r22, r12
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9c4:	89 14       	cp	r8, r9
 9c6:	38 f4       	brcc	.+14     	; 0x9d6 <__stack+0x177>
 9c8:	b6 01       	movw	r22, r12
 9ca:	80 e3       	ldi	r24, 0x30	; 48
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9d2:	9a 94       	dec	r9
 9d4:	f7 cf       	rjmp	.-18     	; 0x9c4 <__stack+0x165>
 9d6:	8a 94       	dec	r8
 9d8:	f3 01       	movw	r30, r6
 9da:	e8 0d       	add	r30, r8
 9dc:	f1 1d       	adc	r31, r1
 9de:	80 81       	ld	r24, Z
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9e8:	81 10       	cpse	r8, r1
 9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <__stack+0x177>
 9ec:	22 20       	and	r2, r2
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <__stack+0x193>
 9f0:	42 ce       	rjmp	.-892    	; 0x676 <vfprintf+0x24>
 9f2:	b6 01       	movw	r22, r12
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9fc:	2a 94       	dec	r2
 9fe:	f6 cf       	rjmp	.-20     	; 0x9ec <__stack+0x18d>
 a00:	f6 01       	movw	r30, r12
 a02:	86 81       	ldd	r24, Z+6	; 0x06
 a04:	97 81       	ldd	r25, Z+7	; 0x07
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <__stack+0x1ad>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	2b 96       	adiw	r28, 0x0b	; 11
 a0e:	e2 e1       	ldi	r30, 0x12	; 18
 a10:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__epilogue_restores__>

00000a14 <strnlen_P>:
 a14:	fc 01       	movw	r30, r24
 a16:	05 90       	lpm	r0, Z+
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen_P+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <strnlen>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	61 50       	subi	r22, 0x01	; 1
 a2e:	70 40       	sbci	r23, 0x00	; 0
 a30:	01 90       	ld	r0, Z+
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <fputc>:
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	fb 01       	movw	r30, r22
 a4a:	23 81       	ldd	r18, Z+3	; 0x03
 a4c:	21 fd       	sbrc	r18, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x16>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2c c0       	rjmp	.+88     	; 0xaae <fputc+0x6e>
 a56:	22 ff       	sbrs	r18, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <fputc+0x46>
 a5a:	46 81       	ldd	r20, Z+6	; 0x06
 a5c:	57 81       	ldd	r21, Z+7	; 0x07
 a5e:	24 81       	ldd	r18, Z+4	; 0x04
 a60:	35 81       	ldd	r19, Z+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	44 f4       	brge	.+16     	; 0xa78 <fputc+0x38>
 a68:	a0 81       	ld	r26, Z
 a6a:	b1 81       	ldd	r27, Z+1	; 0x01
 a6c:	9d 01       	movw	r18, r26
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	31 83       	std	Z+1, r19	; 0x01
 a74:	20 83       	st	Z, r18
 a76:	8c 93       	st	X, r24
 a78:	26 81       	ldd	r18, Z+6	; 0x06
 a7a:	37 81       	ldd	r19, Z+7	; 0x07
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	37 83       	std	Z+7, r19	; 0x07
 a82:	26 83       	std	Z+6, r18	; 0x06
 a84:	14 c0       	rjmp	.+40     	; 0xaae <fputc+0x6e>
 a86:	8b 01       	movw	r16, r22
 a88:	ec 01       	movw	r28, r24
 a8a:	fb 01       	movw	r30, r22
 a8c:	00 84       	ldd	r0, Z+8	; 0x08
 a8e:	f1 85       	ldd	r31, Z+9	; 0x09
 a90:	e0 2d       	mov	r30, r0
 a92:	09 95       	icall
 a94:	89 2b       	or	r24, r25
 a96:	e1 f6       	brne	.-72     	; 0xa50 <fputc+0x10>
 a98:	d8 01       	movw	r26, r16
 a9a:	16 96       	adiw	r26, 0x06	; 6
 a9c:	8d 91       	ld	r24, X+
 a9e:	9c 91       	ld	r25, X
 aa0:	17 97       	sbiw	r26, 0x07	; 7
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	17 96       	adiw	r26, 0x07	; 7
 aa6:	9c 93       	st	X, r25
 aa8:	8e 93       	st	-X, r24
 aaa:	16 97       	sbiw	r26, 0x06	; 6
 aac:	ce 01       	movw	r24, r28
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	08 95       	ret

00000ab8 <__ultoa_invert>:
 ab8:	fa 01       	movw	r30, r20
 aba:	aa 27       	eor	r26, r26
 abc:	28 30       	cpi	r18, 0x08	; 8
 abe:	51 f1       	breq	.+84     	; 0xb14 <__ultoa_invert+0x5c>
 ac0:	20 31       	cpi	r18, 0x10	; 16
 ac2:	81 f1       	breq	.+96     	; 0xb24 <__ultoa_invert+0x6c>
 ac4:	e8 94       	clt
 ac6:	6f 93       	push	r22
 ac8:	6e 7f       	andi	r22, 0xFE	; 254
 aca:	6e 5f       	subi	r22, 0xFE	; 254
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	af 4f       	sbci	r26, 0xFF	; 255
 ad4:	b1 e0       	ldi	r27, 0x01	; 1
 ad6:	3e d0       	rcall	.+124    	; 0xb54 <__ultoa_invert+0x9c>
 ad8:	b4 e0       	ldi	r27, 0x04	; 4
 ada:	3c d0       	rcall	.+120    	; 0xb54 <__ultoa_invert+0x9c>
 adc:	67 0f       	add	r22, r23
 ade:	78 1f       	adc	r23, r24
 ae0:	89 1f       	adc	r24, r25
 ae2:	9a 1f       	adc	r25, r26
 ae4:	a1 1d       	adc	r26, r1
 ae6:	68 0f       	add	r22, r24
 ae8:	79 1f       	adc	r23, r25
 aea:	8a 1f       	adc	r24, r26
 aec:	91 1d       	adc	r25, r1
 aee:	a1 1d       	adc	r26, r1
 af0:	6a 0f       	add	r22, r26
 af2:	71 1d       	adc	r23, r1
 af4:	81 1d       	adc	r24, r1
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	20 d0       	rcall	.+64     	; 0xb3c <__ultoa_invert+0x84>
 afc:	09 f4       	brne	.+2      	; 0xb00 <__ultoa_invert+0x48>
 afe:	68 94       	set
 b00:	3f 91       	pop	r19
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	26 9f       	mul	r18, r22
 b06:	11 24       	eor	r1, r1
 b08:	30 19       	sub	r19, r0
 b0a:	30 5d       	subi	r19, 0xD0	; 208
 b0c:	31 93       	st	Z+, r19
 b0e:	de f6       	brtc	.-74     	; 0xac6 <__ultoa_invert+0xe>
 b10:	cf 01       	movw	r24, r30
 b12:	08 95       	ret
 b14:	46 2f       	mov	r20, r22
 b16:	47 70       	andi	r20, 0x07	; 7
 b18:	40 5d       	subi	r20, 0xD0	; 208
 b1a:	41 93       	st	Z+, r20
 b1c:	b3 e0       	ldi	r27, 0x03	; 3
 b1e:	0f d0       	rcall	.+30     	; 0xb3e <__ultoa_invert+0x86>
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x5c>
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <__ultoa_invert+0x58>
 b24:	46 2f       	mov	r20, r22
 b26:	4f 70       	andi	r20, 0x0F	; 15
 b28:	40 5d       	subi	r20, 0xD0	; 208
 b2a:	4a 33       	cpi	r20, 0x3A	; 58
 b2c:	18 f0       	brcs	.+6      	; 0xb34 <__ultoa_invert+0x7c>
 b2e:	49 5d       	subi	r20, 0xD9	; 217
 b30:	31 fd       	sbrc	r19, 1
 b32:	40 52       	subi	r20, 0x20	; 32
 b34:	41 93       	st	Z+, r20
 b36:	02 d0       	rcall	.+4      	; 0xb3c <__ultoa_invert+0x84>
 b38:	a9 f7       	brne	.-22     	; 0xb24 <__ultoa_invert+0x6c>
 b3a:	ea cf       	rjmp	.-44     	; 0xb10 <__ultoa_invert+0x58>
 b3c:	b4 e0       	ldi	r27, 0x04	; 4
 b3e:	a6 95       	lsr	r26
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x86>
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	61 05       	cpc	r22, r1
 b50:	71 05       	cpc	r23, r1
 b52:	08 95       	ret
 b54:	9b 01       	movw	r18, r22
 b56:	ac 01       	movw	r20, r24
 b58:	0a 2e       	mov	r0, r26
 b5a:	06 94       	lsr	r0
 b5c:	57 95       	ror	r21
 b5e:	47 95       	ror	r20
 b60:	37 95       	ror	r19
 b62:	27 95       	ror	r18
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0xa2>
 b68:	62 0f       	add	r22, r18
 b6a:	73 1f       	adc	r23, r19
 b6c:	84 1f       	adc	r24, r20
 b6e:	95 1f       	adc	r25, r21
 b70:	a0 1d       	adc	r26, r0
 b72:	08 95       	ret

00000b74 <__prologue_saves__>:
 b74:	2f 92       	push	r2
 b76:	3f 92       	push	r3
 b78:	4f 92       	push	r4
 b7a:	5f 92       	push	r5
 b7c:	6f 92       	push	r6
 b7e:	7f 92       	push	r7
 b80:	8f 92       	push	r8
 b82:	9f 92       	push	r9
 b84:	af 92       	push	r10
 b86:	bf 92       	push	r11
 b88:	cf 92       	push	r12
 b8a:	df 92       	push	r13
 b8c:	ef 92       	push	r14
 b8e:	ff 92       	push	r15
 b90:	0f 93       	push	r16
 b92:	1f 93       	push	r17
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62
 b9c:	ca 1b       	sub	r28, r26
 b9e:	db 0b       	sbc	r29, r27
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	09 94       	ijmp

00000bac <__epilogue_restores__>:
 bac:	2a 88       	ldd	r2, Y+18	; 0x12
 bae:	39 88       	ldd	r3, Y+17	; 0x11
 bb0:	48 88       	ldd	r4, Y+16	; 0x10
 bb2:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb4:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb6:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb8:	8c 84       	ldd	r8, Y+12	; 0x0c
 bba:	9b 84       	ldd	r9, Y+11	; 0x0b
 bbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 bbe:	b9 84       	ldd	r11, Y+9	; 0x09
 bc0:	c8 84       	ldd	r12, Y+8	; 0x08
 bc2:	df 80       	ldd	r13, Y+7	; 0x07
 bc4:	ee 80       	ldd	r14, Y+6	; 0x06
 bc6:	fd 80       	ldd	r15, Y+5	; 0x05
 bc8:	0c 81       	ldd	r16, Y+4	; 0x04
 bca:	1b 81       	ldd	r17, Y+3	; 0x03
 bcc:	aa 81       	ldd	r26, Y+2	; 0x02
 bce:	b9 81       	ldd	r27, Y+1	; 0x01
 bd0:	ce 0f       	add	r28, r30
 bd2:	d1 1d       	adc	r29, r1
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	ed 01       	movw	r28, r26
 be0:	08 95       	ret

00000be2 <_exit>:
 be2:	f8 94       	cli

00000be4 <__stop_program>:
 be4:	ff cf       	rjmp	.-2      	; 0xbe4 <__stop_program>
