
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000b92  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007a  0080007a  00000c40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001504  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8b  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000805  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc1  00000000  00000000  0000486d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000542e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_10>
  2c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  8a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_kick>:
	if(line == 0){
		if(pos <16 && pos>=0){
			lcd_send_command(0x80+pos);
		}else if(line == 1){
			if(pos <16 && pos>=0){
				lcd_send_command(0x80+pos);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <lcd_kick+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_kick+0x1a>
  ac:	00 00       	nop
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <lcd_is_busy>:
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	1a ba       	out	0x1a, r1	; 26
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	88 bb       	out	0x18, r24	; 24
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

000000d6 <lcd_send_command>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_is_busy>
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	9c 2f       	mov	r25, r28
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	30 e1       	ldi	r19, 0x10	; 16
  f8:	c3 9f       	mul	r28, r19
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	92 2f       	mov	r25, r18
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	89 2b       	or	r24, r25
 104:	8b bb       	out	0x1b, r24	; 27
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_send_char>:
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	9c 2f       	mov	r25, r28
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	89 2b       	or	r24, r25
 122:	8b bb       	out	0x1b, r24	; 27
 124:	88 b3       	in	r24, 0x18	; 24
 126:	82 60       	ori	r24, 0x02	; 2
 128:	88 bb       	out	0x18, r24	; 24
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	88 bb       	out	0x18, r24	; 24
 130:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 134:	2b b3       	in	r18, 0x1b	; 27
 136:	30 e1       	ldi	r19, 0x10	; 16
 138:	c3 9f       	mul	r28, r19
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	92 2f       	mov	r25, r18
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	89 2b       	or	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
 146:	88 b3       	in	r24, 0x18	; 24
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	88 bb       	out	0x18, r24	; 24
 152:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_clear>:
	}
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CLEAR);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 160:	08 95       	ret

00000162 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0xa>
 16c:	00 00       	nop
	
}
void lcd_init(void)
{
	_delay_ms(20);
	LCD_CTRL_dir_PORT |= (1<<EN | 1<<RW |1<<RS );
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	8e 60       	ori	r24, 0x0E	; 14
 172:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(1<<EN | 1<<RW |1<<RS );
 174:	88 b3       	in	r24, 0x18	; 24
 176:	81 7f       	andi	r24, 0xF1	; 241
 178:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_dir_PORT = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x20>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x26>
 188:	00 00       	nop
	_delay_ms(20);
	
	lcd_clear();
 18a:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
	#ifdef EIGHT_BIT_MODE
		lcd_send_command(LCD_8BIT_MODE_2_LINE);
#endif

	#ifdef FOUR_BIT_MODE
		lcd_send_command(0x02);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
		lcd_send_command(LCD_4BIT_MODE_2_LINE);
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	#endif
	lcd_send_command(LCD_ENTERY_MODE_INC_SHIFT_OFF);
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
	lcd_send_command(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_ON);
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 1ac:	08 95       	ret

000001ae <lcd_send_string>:
			LCD_CTRL &= ~(1<<RW);
			lcd_kick();
		#endif
}
void lcd_send_string(unsigned char* The_char)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	int count=0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	while(*The_char){
 1bc:	17 c0       	rjmp	.+46     	; 0x1ec <lcd_send_string+0x3e>
		lcd_send_char(*The_char++);
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_send_char>
		count++;
 1c6:	21 96       	adiw	r28, 0x01	; 1
		if(count == 16){
 1c8:	c0 31       	cpi	r28, 0x10	; 16
 1ca:	d1 05       	cpc	r29, r1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <lcd_send_string+0x28>
			lcd_send_command(LCD_BEGIN_AT_SECOND_RAW);
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
 1d4:	0b c0       	rjmp	.+22     	; 0x1ec <lcd_send_string+0x3e>
		}
		else if( count == 32 || count == 33){
 1d6:	ce 01       	movw	r24, r28
 1d8:	80 97       	sbiw	r24, 0x20	; 32
 1da:	02 97       	sbiw	r24, 0x02	; 2
 1dc:	38 f4       	brcc	.+14     	; 0x1ec <lcd_send_string+0x3e>
			lcd_clear();
 1de:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
			lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_command>
			count = 0;
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
		#endif
}
void lcd_send_string(unsigned char* The_char)
{
	int count=0;
	while(*The_char){
 1ec:	f8 01       	movw	r30, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	81 11       	cpse	r24, r1
 1f2:	e5 cf       	rjmp	.-54     	; 0x1be <lcd_send_string+0x10>
			lcd_send_command(LCD_BEGIN_AT_FIRST_RAW);
			count = 0;
		}
	}
	
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <lcd_send_number>:
void lcd_clear(void)
{
	lcd_send_command(LCD_CLEAR);
	}
void lcd_send_number(int number)
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	27 97       	sbiw	r28, 0x07	; 7
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	char str[7];
	sprintf(str,"%d",number);
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	8e 01       	movw	r16, r28
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	1f 93       	push	r17
 22a:	0f 93       	push	r16
 22c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <sprintf>
	lcd_send_string(str);	
 230:	c8 01       	movw	r24, r16
 232:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
	
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	27 96       	adiw	r28, 0x07	; 7
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <main>:

uint32_t ADC_Data;
uint32_t Temp;

int main(void)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	27 97       	sbiw	r28, 0x07	; 7
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 26c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_init>
	ADC_Config_t adc_cfg;
	adc_cfg.ADC_Mode =ADC_MODE_SINGLE_CONVERSION;
 270:	19 82       	std	Y+1, r1	; 0x01
	adc_cfg.ADC_Prescaler = ADC_PRESCALER_64;
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	8c 83       	std	Y+4, r24	; 0x04
	adc_cfg.ADC_Res_presentation = ADC_RES_PRESENTATION_LEFT_ADJUSTED;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	8b 83       	std	Y+3, r24	; 0x03
	adc_cfg.ADC_Volt_Ref = ADC_VOLT_REF_AVCC;
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	8a 83       	std	Y+2, r24	; 0x02
	adc_cfg.ADC_IRQ_Enable = ADC_IRQ_ENABLE_NONE;
 27e:	1d 82       	std	Y+5, r1	; 0x05
	adc_cfg.P_CallBack = NULL;
 280:	1f 82       	std	Y+7, r1	; 0x07
 282:	1e 82       	std	Y+6, r1	; 0x06
	
	MCAL_ADC_Init(&adc_cfg);
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_ADC_Init>
	while(1){
	MCAL_ADC_Get_Result(ADC1,&ADC_Data,ADC_ENABLE);
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	60 e8       	ldi	r22, 0x80	; 128
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 c4 01 	call	0x388	; 0x388 <MCAL_ADC_Get_Result>
	Temp  =(((ADC_Data *5000) / 1024) /10);
 298:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <ADC_Data>
 29c:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <ADC_Data+0x1>
 2a0:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <ADC_Data+0x2>
 2a4:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <ADC_Data+0x3>
 2a8:	a8 e8       	ldi	r26, 0x88	; 136
 2aa:	b3 e1       	ldi	r27, 0x13	; 19
 2ac:	0e 94 c3 02 	call	0x586	; 0x586 <__muluhisi3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	38 e2       	ldi	r19, 0x28	; 40
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	0e 94 a1 02 	call	0x542	; 0x542 <__udivmodsi4>
 2bc:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <Temp>
 2c0:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <Temp+0x1>
 2c4:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <Temp+0x2>
 2c8:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <Temp+0x3>
	lcd_send_string("Temp: ");
 2cc:	8f e6       	ldi	r24, 0x6F	; 111
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
	lcd_send_number(Temp);
 2d4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Temp>
 2d8:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <Temp+0x1>
 2dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_send_number>
	lcd_send_string(" C");
 2e0:	86 e7       	ldi	r24, 0x76	; 118
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_send_string>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	89 e6       	ldi	r24, 0x69	; 105
 2ec:	98 e1       	ldi	r25, 0x18	; 24
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x96>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0xa0>
 2f8:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 2fa:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clear>
 2fe:	c6 cf       	rjmp	.-116    	; 0x28c <main+0x34>

00000300 <MCAL_ADC_Init>:
	}
}
void MCAL_ADC_DeInit(void){
	ADMUX = 0x0;
	ADCSRA =0x0;
	SFIOR &= ~(1<<5 | 1<<6 | 1<<7);
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	fe 01       	movw	r30, r28
 30a:	a4 e8       	ldi	r26, 0x84	; 132
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	8a 95       	dec	r24
 314:	e1 f7       	brne	.-8      	; 0x30e <MCAL_ADC_Init+0xe>
 316:	96 b1       	in	r25, 0x06	; 6
 318:	88 81       	ld	r24, Y
 31a:	89 2b       	or	r24, r25
 31c:	86 b9       	out	0x06, r24	; 6
 31e:	96 b1       	in	r25, 0x06	; 6
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	89 2b       	or	r24, r25
 324:	86 b9       	out	0x06, r24	; 6
 326:	97 b1       	in	r25, 0x07	; 7
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	89 2b       	or	r24, r25
 32c:	87 b9       	out	0x07, r24	; 7
 32e:	97 b1       	in	r25, 0x07	; 7
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	89 2b       	or	r24, r25
 334:	87 b9       	out	0x07, r24	; 7
 336:	97 b1       	in	r25, 0x07	; 7
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	89 2b       	or	r24, r25
 33c:	87 b9       	out	0x07, r24	; 7
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	19 f4       	brne	.+6      	; 0x34a <MCAL_ADC_Init+0x4a>
 344:	8f b7       	in	r24, 0x3f	; 63
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8f bf       	out	0x3f, r24	; 63
 34a:	86 b1       	in	r24, 0x06	; 6
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	86 b9       	out	0x06, r24	; 6
 350:	28 81       	ld	r18, Y
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	46 b1       	in	r20, 0x06	; 6
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <MCAL_ADC_Init+0x60>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	4a 95       	dec	r20
 362:	e2 f7       	brpl	.-8      	; 0x35c <MCAL_ADC_Init+0x5c>
 364:	99 27       	eor	r25, r25
 366:	28 17       	cp	r18, r24
 368:	39 07       	cpc	r19, r25
 36a:	19 f4       	brne	.+6      	; 0x372 <MCAL_ADC_Init+0x72>
 36c:	86 b1       	in	r24, 0x06	; 6
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	86 b9       	out	0x06, r24	; 6
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <MCAL_ADC_Start_Conversion>:
}

void MCAL_ADC_Start_Conversion(void){
	if(G_ADC_Config.ADC_Mode == ADC_MODE_SINGLE_CONVERSION){
 378:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <G_ADC_Config>
 37c:	81 11       	cpse	r24, r1
 37e:	03 c0       	rjmp	.+6      	; 0x386 <MCAL_ADC_Start_Conversion+0xe>
		SET_BIT(ADCSRA,6);
 380:	86 b1       	in	r24, 0x06	; 6
 382:	80 64       	ori	r24, 0x40	; 64
 384:	86 b9       	out	0x06, r24	; 6
 386:	08 95       	ret

00000388 <MCAL_ADC_Get_Result>:
	}
}
void MCAL_ADC_Get_Result(Channel_Select_t channel,uint16_t *data,Polling_Mechanism_t polling){
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	eb 01       	movw	r28, r22
 390:	14 2f       	mov	r17, r20
	ADMUX &= ~(0x1F);
 392:	97 b1       	in	r25, 0x07	; 7
 394:	90 7e       	andi	r25, 0xE0	; 224
 396:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (uint8_t)channel;
 398:	97 b1       	in	r25, 0x07	; 7
 39a:	98 2b       	or	r25, r24
 39c:	97 b9       	out	0x07, r25	; 7
	CLEAR_BIT(DDRA,channel);
 39e:	4a b3       	in	r20, 0x1a	; 26
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <MCAL_ADC_Get_Result+0x24>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <MCAL_ADC_Get_Result+0x20>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	8a bb       	out	0x1a, r24	; 26
	MCAL_ADC_Start_Conversion();
 3b8:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_ADC_Start_Conversion>
	
	if(polling == ADC_ENABLE){
 3bc:	11 11       	cpse	r17, r1
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MCAL_ADC_Get_Result+0x3c>
		while(!READ_BIT(ADCSRA,4));
 3c0:	34 9b       	sbis	0x06, 4	; 6
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <MCAL_ADC_Get_Result+0x38>
	}
	if(G_ADC_Config.ADC_Res_presentation == ADC_RES_PRESENTATION_RIGHT_ADJUSTED){
 3c4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <G_ADC_Config+0x2>
 3c8:	81 11       	cpse	r24, r1
 3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <MCAL_ADC_Get_Result+0x58>
		*data = (ADCL | ((ADCH & (0x03)) <<8 ));
 3cc:	24 b1       	in	r18, 0x04	; 4
 3ce:	85 b1       	in	r24, 0x05	; 5
 3d0:	83 70       	andi	r24, 0x03	; 3
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	98 2f       	mov	r25, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	82 2b       	or	r24, r18
 3da:	99 83       	std	Y+1, r25	; 0x01
 3dc:	88 83       	st	Y, r24
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <MCAL_ADC_Get_Result+0x74>
	}
	else{
		*data = ((ADCL & (0xC0)) >>6)  | (ADCH << 2);
 3e0:	24 b1       	in	r18, 0x04	; 4
 3e2:	22 95       	swap	r18
 3e4:	26 95       	lsr	r18
 3e6:	26 95       	lsr	r18
 3e8:	23 70       	andi	r18, 0x03	; 3
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	82 2b       	or	r24, r18
 3f8:	99 83       	std	Y+1, r25	; 0x01
 3fa:	88 83       	st	Y, r24
	}
	CLEAR_BIT(ADCSRA, 4);
 3fc:	86 b1       	in	r24, 0x06	; 6
 3fe:	8f 7e       	andi	r24, 0xEF	; 239
 400:	86 b9       	out	0x06, r24	; 6

}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	08 95       	ret

0000040a <__vector_11>:
		OCR0 = (uint8_t)(255 - Duty_Cycle);
	}
}

ISR(TIMER0_OVF_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	GP_IRQ_CallBack();
 42c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 430:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 434:	09 95       	icall
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	GP_IRQ_CallBack();
 47a:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 47e:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 482:	09 95       	icall
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	GP_IRQ_CallBack();
 4c8:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 4cc:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 4d0:	09 95       	icall
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__vector_15>:

ISR(USART_TXC_vect)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	GP_IRQ_CallBack();
 516:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 51a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 51e:	09 95       	icall
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__udivmodsi4>:
 542:	a1 e2       	ldi	r26, 0x21	; 33
 544:	1a 2e       	mov	r1, r26
 546:	aa 1b       	sub	r26, r26
 548:	bb 1b       	sub	r27, r27
 54a:	fd 01       	movw	r30, r26
 54c:	0d c0       	rjmp	.+26     	; 0x568 <__udivmodsi4_ep>

0000054e <__udivmodsi4_loop>:
 54e:	aa 1f       	adc	r26, r26
 550:	bb 1f       	adc	r27, r27
 552:	ee 1f       	adc	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	a2 17       	cp	r26, r18
 558:	b3 07       	cpc	r27, r19
 55a:	e4 07       	cpc	r30, r20
 55c:	f5 07       	cpc	r31, r21
 55e:	20 f0       	brcs	.+8      	; 0x568 <__udivmodsi4_ep>
 560:	a2 1b       	sub	r26, r18
 562:	b3 0b       	sbc	r27, r19
 564:	e4 0b       	sbc	r30, r20
 566:	f5 0b       	sbc	r31, r21

00000568 <__udivmodsi4_ep>:
 568:	66 1f       	adc	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	1a 94       	dec	r1
 572:	69 f7       	brne	.-38     	; 0x54e <__udivmodsi4_loop>
 574:	60 95       	com	r22
 576:	70 95       	com	r23
 578:	80 95       	com	r24
 57a:	90 95       	com	r25
 57c:	9b 01       	movw	r18, r22
 57e:	ac 01       	movw	r20, r24
 580:	bd 01       	movw	r22, r26
 582:	cf 01       	movw	r24, r30
 584:	08 95       	ret

00000586 <__muluhisi3>:
 586:	0e 94 ce 02 	call	0x59c	; 0x59c <__umulhisi3>
 58a:	a5 9f       	mul	r26, r21
 58c:	90 0d       	add	r25, r0
 58e:	b4 9f       	mul	r27, r20
 590:	90 0d       	add	r25, r0
 592:	a4 9f       	mul	r26, r20
 594:	80 0d       	add	r24, r0
 596:	91 1d       	adc	r25, r1
 598:	11 24       	eor	r1, r1
 59a:	08 95       	ret

0000059c <__umulhisi3>:
 59c:	a2 9f       	mul	r26, r18
 59e:	b0 01       	movw	r22, r0
 5a0:	b3 9f       	mul	r27, r19
 5a2:	c0 01       	movw	r24, r0
 5a4:	a3 9f       	mul	r26, r19
 5a6:	70 0d       	add	r23, r0
 5a8:	81 1d       	adc	r24, r1
 5aa:	11 24       	eor	r1, r1
 5ac:	91 1d       	adc	r25, r1
 5ae:	b2 9f       	mul	r27, r18
 5b0:	70 0d       	add	r23, r0
 5b2:	81 1d       	adc	r24, r1
 5b4:	11 24       	eor	r1, r1
 5b6:	91 1d       	adc	r25, r1
 5b8:	08 95       	ret

000005ba <sprintf>:
 5ba:	ae e0       	ldi	r26, 0x0E	; 14
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	e3 ee       	ldi	r30, 0xE3	; 227
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__prologue_saves__+0x1c>
 5c6:	0d 89       	ldd	r16, Y+21	; 0x15
 5c8:	1e 89       	ldd	r17, Y+22	; 0x16
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	8c 83       	std	Y+4, r24	; 0x04
 5ce:	1a 83       	std	Y+2, r17	; 0x02
 5d0:	09 83       	std	Y+1, r16	; 0x01
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	9f e7       	ldi	r25, 0x7F	; 127
 5d6:	9e 83       	std	Y+6, r25	; 0x06
 5d8:	8d 83       	std	Y+5, r24	; 0x05
 5da:	ae 01       	movw	r20, r28
 5dc:	47 5e       	subi	r20, 0xE7	; 231
 5de:	5f 4f       	sbci	r21, 0xFF	; 255
 5e0:	6f 89       	ldd	r22, Y+23	; 0x17
 5e2:	78 8d       	ldd	r23, Y+24	; 0x18
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <vfprintf>
 5ec:	ef 81       	ldd	r30, Y+7	; 0x07
 5ee:	f8 85       	ldd	r31, Y+8	; 0x08
 5f0:	e0 0f       	add	r30, r16
 5f2:	f1 1f       	adc	r31, r17
 5f4:	10 82       	st	Z, r1
 5f6:	2e 96       	adiw	r28, 0x0e	; 14
 5f8:	e4 e0       	ldi	r30, 0x04	; 4
 5fa:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__epilogue_restores__+0x1c>

000005fe <vfprintf>:
 5fe:	ab e0       	ldi	r26, 0x0B	; 11
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e5 e0       	ldi	r30, 0x05	; 5
 604:	f3 e0       	ldi	r31, 0x03	; 3
 606:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__prologue_saves__>
 60a:	6c 01       	movw	r12, r24
 60c:	7b 01       	movw	r14, r22
 60e:	8a 01       	movw	r16, r20
 610:	fc 01       	movw	r30, r24
 612:	17 82       	std	Z+7, r1	; 0x07
 614:	16 82       	std	Z+6, r1	; 0x06
 616:	83 81       	ldd	r24, Z+3	; 0x03
 618:	81 ff       	sbrs	r24, 1
 61a:	cc c1       	rjmp	.+920    	; 0x9b4 <__stack+0x155>
 61c:	ce 01       	movw	r24, r28
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	3c 01       	movw	r6, r24
 622:	f6 01       	movw	r30, r12
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	f7 01       	movw	r30, r14
 628:	93 fd       	sbrc	r25, 3
 62a:	85 91       	lpm	r24, Z+
 62c:	93 ff       	sbrs	r25, 3
 62e:	81 91       	ld	r24, Z+
 630:	7f 01       	movw	r14, r30
 632:	88 23       	and	r24, r24
 634:	09 f4       	brne	.+2      	; 0x638 <vfprintf+0x3a>
 636:	ba c1       	rjmp	.+884    	; 0x9ac <__stack+0x14d>
 638:	85 32       	cpi	r24, 0x25	; 37
 63a:	39 f4       	brne	.+14     	; 0x64a <vfprintf+0x4c>
 63c:	93 fd       	sbrc	r25, 3
 63e:	85 91       	lpm	r24, Z+
 640:	93 ff       	sbrs	r25, 3
 642:	81 91       	ld	r24, Z+
 644:	7f 01       	movw	r14, r30
 646:	85 32       	cpi	r24, 0x25	; 37
 648:	29 f4       	brne	.+10     	; 0x654 <vfprintf+0x56>
 64a:	b6 01       	movw	r22, r12
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 652:	e7 cf       	rjmp	.-50     	; 0x622 <vfprintf+0x24>
 654:	91 2c       	mov	r9, r1
 656:	21 2c       	mov	r2, r1
 658:	31 2c       	mov	r3, r1
 65a:	ff e1       	ldi	r31, 0x1F	; 31
 65c:	f3 15       	cp	r31, r3
 65e:	d8 f0       	brcs	.+54     	; 0x696 <vfprintf+0x98>
 660:	8b 32       	cpi	r24, 0x2B	; 43
 662:	79 f0       	breq	.+30     	; 0x682 <vfprintf+0x84>
 664:	38 f4       	brcc	.+14     	; 0x674 <vfprintf+0x76>
 666:	80 32       	cpi	r24, 0x20	; 32
 668:	79 f0       	breq	.+30     	; 0x688 <vfprintf+0x8a>
 66a:	83 32       	cpi	r24, 0x23	; 35
 66c:	a1 f4       	brne	.+40     	; 0x696 <vfprintf+0x98>
 66e:	23 2d       	mov	r18, r3
 670:	20 61       	ori	r18, 0x10	; 16
 672:	1d c0       	rjmp	.+58     	; 0x6ae <vfprintf+0xb0>
 674:	8d 32       	cpi	r24, 0x2D	; 45
 676:	61 f0       	breq	.+24     	; 0x690 <vfprintf+0x92>
 678:	80 33       	cpi	r24, 0x30	; 48
 67a:	69 f4       	brne	.+26     	; 0x696 <vfprintf+0x98>
 67c:	23 2d       	mov	r18, r3
 67e:	21 60       	ori	r18, 0x01	; 1
 680:	16 c0       	rjmp	.+44     	; 0x6ae <vfprintf+0xb0>
 682:	83 2d       	mov	r24, r3
 684:	82 60       	ori	r24, 0x02	; 2
 686:	38 2e       	mov	r3, r24
 688:	e3 2d       	mov	r30, r3
 68a:	e4 60       	ori	r30, 0x04	; 4
 68c:	3e 2e       	mov	r3, r30
 68e:	2a c0       	rjmp	.+84     	; 0x6e4 <vfprintf+0xe6>
 690:	f3 2d       	mov	r31, r3
 692:	f8 60       	ori	r31, 0x08	; 8
 694:	1d c0       	rjmp	.+58     	; 0x6d0 <vfprintf+0xd2>
 696:	37 fc       	sbrc	r3, 7
 698:	2d c0       	rjmp	.+90     	; 0x6f4 <vfprintf+0xf6>
 69a:	20 ed       	ldi	r18, 0xD0	; 208
 69c:	28 0f       	add	r18, r24
 69e:	2a 30       	cpi	r18, 0x0A	; 10
 6a0:	40 f0       	brcs	.+16     	; 0x6b2 <vfprintf+0xb4>
 6a2:	8e 32       	cpi	r24, 0x2E	; 46
 6a4:	b9 f4       	brne	.+46     	; 0x6d4 <vfprintf+0xd6>
 6a6:	36 fc       	sbrc	r3, 6
 6a8:	81 c1       	rjmp	.+770    	; 0x9ac <__stack+0x14d>
 6aa:	23 2d       	mov	r18, r3
 6ac:	20 64       	ori	r18, 0x40	; 64
 6ae:	32 2e       	mov	r3, r18
 6b0:	19 c0       	rjmp	.+50     	; 0x6e4 <vfprintf+0xe6>
 6b2:	36 fe       	sbrs	r3, 6
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <vfprintf+0xc4>
 6b6:	8a e0       	ldi	r24, 0x0A	; 10
 6b8:	98 9e       	mul	r9, r24
 6ba:	20 0d       	add	r18, r0
 6bc:	11 24       	eor	r1, r1
 6be:	92 2e       	mov	r9, r18
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <vfprintf+0xe6>
 6c2:	ea e0       	ldi	r30, 0x0A	; 10
 6c4:	2e 9e       	mul	r2, r30
 6c6:	20 0d       	add	r18, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	22 2e       	mov	r2, r18
 6cc:	f3 2d       	mov	r31, r3
 6ce:	f0 62       	ori	r31, 0x20	; 32
 6d0:	3f 2e       	mov	r3, r31
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0xe6>
 6d4:	8c 36       	cpi	r24, 0x6C	; 108
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <vfprintf+0xe2>
 6d8:	83 2d       	mov	r24, r3
 6da:	80 68       	ori	r24, 0x80	; 128
 6dc:	38 2e       	mov	r3, r24
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0xe6>
 6e0:	88 36       	cpi	r24, 0x68	; 104
 6e2:	41 f4       	brne	.+16     	; 0x6f4 <vfprintf+0xf6>
 6e4:	f7 01       	movw	r30, r14
 6e6:	93 fd       	sbrc	r25, 3
 6e8:	85 91       	lpm	r24, Z+
 6ea:	93 ff       	sbrs	r25, 3
 6ec:	81 91       	ld	r24, Z+
 6ee:	7f 01       	movw	r14, r30
 6f0:	81 11       	cpse	r24, r1
 6f2:	b3 cf       	rjmp	.-154    	; 0x65a <vfprintf+0x5c>
 6f4:	98 2f       	mov	r25, r24
 6f6:	9f 7d       	andi	r25, 0xDF	; 223
 6f8:	95 54       	subi	r25, 0x45	; 69
 6fa:	93 30       	cpi	r25, 0x03	; 3
 6fc:	28 f4       	brcc	.+10     	; 0x708 <vfprintf+0x10a>
 6fe:	0c 5f       	subi	r16, 0xFC	; 252
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	9f e3       	ldi	r25, 0x3F	; 63
 704:	99 83       	std	Y+1, r25	; 0x01
 706:	0d c0       	rjmp	.+26     	; 0x722 <vfprintf+0x124>
 708:	83 36       	cpi	r24, 0x63	; 99
 70a:	31 f0       	breq	.+12     	; 0x718 <vfprintf+0x11a>
 70c:	83 37       	cpi	r24, 0x73	; 115
 70e:	71 f0       	breq	.+28     	; 0x72c <vfprintf+0x12e>
 710:	83 35       	cpi	r24, 0x53	; 83
 712:	09 f0       	breq	.+2      	; 0x716 <vfprintf+0x118>
 714:	59 c0       	rjmp	.+178    	; 0x7c8 <vfprintf+0x1ca>
 716:	21 c0       	rjmp	.+66     	; 0x75a <vfprintf+0x15c>
 718:	f8 01       	movw	r30, r16
 71a:	80 81       	ld	r24, Z
 71c:	89 83       	std	Y+1, r24	; 0x01
 71e:	0e 5f       	subi	r16, 0xFE	; 254
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	88 24       	eor	r8, r8
 724:	83 94       	inc	r8
 726:	91 2c       	mov	r9, r1
 728:	53 01       	movw	r10, r6
 72a:	13 c0       	rjmp	.+38     	; 0x752 <vfprintf+0x154>
 72c:	28 01       	movw	r4, r16
 72e:	f2 e0       	ldi	r31, 0x02	; 2
 730:	4f 0e       	add	r4, r31
 732:	51 1c       	adc	r5, r1
 734:	f8 01       	movw	r30, r16
 736:	a0 80       	ld	r10, Z
 738:	b1 80       	ldd	r11, Z+1	; 0x01
 73a:	36 fe       	sbrs	r3, 6
 73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x146>
 73e:	69 2d       	mov	r22, r9
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x14a>
 744:	6f ef       	ldi	r22, 0xFF	; 255
 746:	7f ef       	ldi	r23, 0xFF	; 255
 748:	c5 01       	movw	r24, r10
 74a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <strnlen>
 74e:	4c 01       	movw	r8, r24
 750:	82 01       	movw	r16, r4
 752:	f3 2d       	mov	r31, r3
 754:	ff 77       	andi	r31, 0x7F	; 127
 756:	3f 2e       	mov	r3, r31
 758:	16 c0       	rjmp	.+44     	; 0x786 <vfprintf+0x188>
 75a:	28 01       	movw	r4, r16
 75c:	22 e0       	ldi	r18, 0x02	; 2
 75e:	42 0e       	add	r4, r18
 760:	51 1c       	adc	r5, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	36 fe       	sbrs	r3, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x174>
 76c:	69 2d       	mov	r22, r9
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x178>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <strnlen_P>
 77c:	4c 01       	movw	r8, r24
 77e:	f3 2d       	mov	r31, r3
 780:	f0 68       	ori	r31, 0x80	; 128
 782:	3f 2e       	mov	r3, r31
 784:	82 01       	movw	r16, r4
 786:	33 fc       	sbrc	r3, 3
 788:	1b c0       	rjmp	.+54     	; 0x7c0 <vfprintf+0x1c2>
 78a:	82 2d       	mov	r24, r2
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	88 16       	cp	r8, r24
 790:	99 06       	cpc	r9, r25
 792:	b0 f4       	brcc	.+44     	; 0x7c0 <vfprintf+0x1c2>
 794:	b6 01       	movw	r22, r12
 796:	80 e2       	ldi	r24, 0x20	; 32
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 79e:	2a 94       	dec	r2
 7a0:	f4 cf       	rjmp	.-24     	; 0x78a <vfprintf+0x18c>
 7a2:	f5 01       	movw	r30, r10
 7a4:	37 fc       	sbrc	r3, 7
 7a6:	85 91       	lpm	r24, Z+
 7a8:	37 fe       	sbrs	r3, 7
 7aa:	81 91       	ld	r24, Z+
 7ac:	5f 01       	movw	r10, r30
 7ae:	b6 01       	movw	r22, r12
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 7b6:	21 10       	cpse	r2, r1
 7b8:	2a 94       	dec	r2
 7ba:	21 e0       	ldi	r18, 0x01	; 1
 7bc:	82 1a       	sub	r8, r18
 7be:	91 08       	sbc	r9, r1
 7c0:	81 14       	cp	r8, r1
 7c2:	91 04       	cpc	r9, r1
 7c4:	71 f7       	brne	.-36     	; 0x7a2 <vfprintf+0x1a4>
 7c6:	e8 c0       	rjmp	.+464    	; 0x998 <__stack+0x139>
 7c8:	84 36       	cpi	r24, 0x64	; 100
 7ca:	11 f0       	breq	.+4      	; 0x7d0 <vfprintf+0x1d2>
 7cc:	89 36       	cpi	r24, 0x69	; 105
 7ce:	41 f5       	brne	.+80     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7d0:	f8 01       	movw	r30, r16
 7d2:	37 fe       	sbrs	r3, 7
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <vfprintf+0x1e6>
 7d6:	60 81       	ld	r22, Z
 7d8:	71 81       	ldd	r23, Z+1	; 0x01
 7da:	82 81       	ldd	r24, Z+2	; 0x02
 7dc:	93 81       	ldd	r25, Z+3	; 0x03
 7de:	0c 5f       	subi	r16, 0xFC	; 252
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <vfprintf+0x1f6>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	07 2e       	mov	r0, r23
 7ea:	00 0c       	add	r0, r0
 7ec:	88 0b       	sbc	r24, r24
 7ee:	99 0b       	sbc	r25, r25
 7f0:	0e 5f       	subi	r16, 0xFE	; 254
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	f3 2d       	mov	r31, r3
 7f6:	ff 76       	andi	r31, 0x6F	; 111
 7f8:	3f 2e       	mov	r3, r31
 7fa:	97 ff       	sbrs	r25, 7
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7fe:	90 95       	com	r25
 800:	80 95       	com	r24
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	f0 68       	ori	r31, 0x80	; 128
 80e:	3f 2e       	mov	r3, r31
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	a3 01       	movw	r20, r6
 816:	0e 94 32 05 	call	0xa64	; 0xa64 <__ultoa_invert>
 81a:	88 2e       	mov	r8, r24
 81c:	86 18       	sub	r8, r6
 81e:	45 c0       	rjmp	.+138    	; 0x8aa <__stack+0x4b>
 820:	85 37       	cpi	r24, 0x75	; 117
 822:	31 f4       	brne	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 824:	23 2d       	mov	r18, r3
 826:	2f 7e       	andi	r18, 0xEF	; 239
 828:	b2 2e       	mov	r11, r18
 82a:	2a e0       	ldi	r18, 0x0A	; 10
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	25 c0       	rjmp	.+74     	; 0x87a <__stack+0x1b>
 830:	93 2d       	mov	r25, r3
 832:	99 7f       	andi	r25, 0xF9	; 249
 834:	b9 2e       	mov	r11, r25
 836:	8f 36       	cpi	r24, 0x6F	; 111
 838:	c1 f0       	breq	.+48     	; 0x86a <__stack+0xb>
 83a:	18 f4       	brcc	.+6      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83c:	88 35       	cpi	r24, 0x58	; 88
 83e:	79 f0       	breq	.+30     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 840:	b5 c0       	rjmp	.+362    	; 0x9ac <__stack+0x14d>
 842:	80 37       	cpi	r24, 0x70	; 112
 844:	19 f0       	breq	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 846:	88 37       	cpi	r24, 0x78	; 120
 848:	21 f0       	breq	.+8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84a:	b0 c0       	rjmp	.+352    	; 0x9ac <__stack+0x14d>
 84c:	e9 2f       	mov	r30, r25
 84e:	e0 61       	ori	r30, 0x10	; 16
 850:	be 2e       	mov	r11, r30
 852:	b4 fe       	sbrs	r11, 4
 854:	0d c0       	rjmp	.+26     	; 0x870 <__stack+0x11>
 856:	fb 2d       	mov	r31, r11
 858:	f4 60       	ori	r31, 0x04	; 4
 85a:	bf 2e       	mov	r11, r31
 85c:	09 c0       	rjmp	.+18     	; 0x870 <__stack+0x11>
 85e:	34 fe       	sbrs	r3, 4
 860:	0a c0       	rjmp	.+20     	; 0x876 <__stack+0x17>
 862:	29 2f       	mov	r18, r25
 864:	26 60       	ori	r18, 0x06	; 6
 866:	b2 2e       	mov	r11, r18
 868:	06 c0       	rjmp	.+12     	; 0x876 <__stack+0x17>
 86a:	28 e0       	ldi	r18, 0x08	; 8
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
 870:	20 e1       	ldi	r18, 0x10	; 16
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	20 e1       	ldi	r18, 0x10	; 16
 878:	32 e0       	ldi	r19, 0x02	; 2
 87a:	f8 01       	movw	r30, r16
 87c:	b7 fe       	sbrs	r11, 7
 87e:	07 c0       	rjmp	.+14     	; 0x88e <__stack+0x2f>
 880:	60 81       	ld	r22, Z
 882:	71 81       	ldd	r23, Z+1	; 0x01
 884:	82 81       	ldd	r24, Z+2	; 0x02
 886:	93 81       	ldd	r25, Z+3	; 0x03
 888:	0c 5f       	subi	r16, 0xFC	; 252
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__stack+0x3b>
 88e:	60 81       	ld	r22, Z
 890:	71 81       	ldd	r23, Z+1	; 0x01
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 5f       	subi	r16, 0xFE	; 254
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	a3 01       	movw	r20, r6
 89c:	0e 94 32 05 	call	0xa64	; 0xa64 <__ultoa_invert>
 8a0:	88 2e       	mov	r8, r24
 8a2:	86 18       	sub	r8, r6
 8a4:	fb 2d       	mov	r31, r11
 8a6:	ff 77       	andi	r31, 0x7F	; 127
 8a8:	3f 2e       	mov	r3, r31
 8aa:	36 fe       	sbrs	r3, 6
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__stack+0x69>
 8ae:	23 2d       	mov	r18, r3
 8b0:	2e 7f       	andi	r18, 0xFE	; 254
 8b2:	a2 2e       	mov	r10, r18
 8b4:	89 14       	cp	r8, r9
 8b6:	58 f4       	brcc	.+22     	; 0x8ce <__stack+0x6f>
 8b8:	34 fe       	sbrs	r3, 4
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <__stack+0x73>
 8bc:	32 fc       	sbrc	r3, 2
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__stack+0x73>
 8c0:	83 2d       	mov	r24, r3
 8c2:	8e 7e       	andi	r24, 0xEE	; 238
 8c4:	a8 2e       	mov	r10, r24
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__stack+0x73>
 8c8:	b8 2c       	mov	r11, r8
 8ca:	a3 2c       	mov	r10, r3
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <__stack+0x75>
 8ce:	b8 2c       	mov	r11, r8
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <__stack+0x75>
 8d2:	b9 2c       	mov	r11, r9
 8d4:	a4 fe       	sbrs	r10, 4
 8d6:	0f c0       	rjmp	.+30     	; 0x8f6 <__stack+0x97>
 8d8:	fe 01       	movw	r30, r28
 8da:	e8 0d       	add	r30, r8
 8dc:	f1 1d       	adc	r31, r1
 8de:	80 81       	ld	r24, Z
 8e0:	80 33       	cpi	r24, 0x30	; 48
 8e2:	21 f4       	brne	.+8      	; 0x8ec <__stack+0x8d>
 8e4:	9a 2d       	mov	r25, r10
 8e6:	99 7e       	andi	r25, 0xE9	; 233
 8e8:	a9 2e       	mov	r10, r25
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <__stack+0x9f>
 8ec:	a2 fe       	sbrs	r10, 2
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <__stack+0x9d>
 8f0:	b3 94       	inc	r11
 8f2:	b3 94       	inc	r11
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__stack+0x9f>
 8f6:	8a 2d       	mov	r24, r10
 8f8:	86 78       	andi	r24, 0x86	; 134
 8fa:	09 f0       	breq	.+2      	; 0x8fe <__stack+0x9f>
 8fc:	b3 94       	inc	r11
 8fe:	a3 fc       	sbrc	r10, 3
 900:	11 c0       	rjmp	.+34     	; 0x924 <__stack+0xc5>
 902:	a0 fe       	sbrs	r10, 0
 904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0xb3>
 906:	b2 14       	cp	r11, r2
 908:	88 f4       	brcc	.+34     	; 0x92c <__stack+0xcd>
 90a:	28 0c       	add	r2, r8
 90c:	92 2c       	mov	r9, r2
 90e:	9b 18       	sub	r9, r11
 910:	0e c0       	rjmp	.+28     	; 0x92e <__stack+0xcf>
 912:	b2 14       	cp	r11, r2
 914:	60 f4       	brcc	.+24     	; 0x92e <__stack+0xcf>
 916:	b6 01       	movw	r22, r12
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 920:	b3 94       	inc	r11
 922:	f7 cf       	rjmp	.-18     	; 0x912 <__stack+0xb3>
 924:	b2 14       	cp	r11, r2
 926:	18 f4       	brcc	.+6      	; 0x92e <__stack+0xcf>
 928:	2b 18       	sub	r2, r11
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	98 2c       	mov	r9, r8
 92e:	21 2c       	mov	r2, r1
 930:	a4 fe       	sbrs	r10, 4
 932:	10 c0       	rjmp	.+32     	; 0x954 <__stack+0xf5>
 934:	b6 01       	movw	r22, r12
 936:	80 e3       	ldi	r24, 0x30	; 48
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 93e:	a2 fe       	sbrs	r10, 2
 940:	17 c0       	rjmp	.+46     	; 0x970 <__stack+0x111>
 942:	a1 fc       	sbrc	r10, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0xed>
 946:	88 e7       	ldi	r24, 0x78	; 120
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0xf1>
 94c:	88 e5       	ldi	r24, 0x58	; 88
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	b6 01       	movw	r22, r12
 952:	0c c0       	rjmp	.+24     	; 0x96c <__stack+0x10d>
 954:	8a 2d       	mov	r24, r10
 956:	86 78       	andi	r24, 0x86	; 134
 958:	59 f0       	breq	.+22     	; 0x970 <__stack+0x111>
 95a:	a1 fe       	sbrs	r10, 1
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x103>
 95e:	8b e2       	ldi	r24, 0x2B	; 43
 960:	01 c0       	rjmp	.+2      	; 0x964 <__stack+0x105>
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	a7 fc       	sbrc	r10, 7
 966:	8d e2       	ldi	r24, 0x2D	; 45
 968:	b6 01       	movw	r22, r12
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 970:	89 14       	cp	r8, r9
 972:	38 f4       	brcc	.+14     	; 0x982 <__stack+0x123>
 974:	b6 01       	movw	r22, r12
 976:	80 e3       	ldi	r24, 0x30	; 48
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 97e:	9a 94       	dec	r9
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x111>
 982:	8a 94       	dec	r8
 984:	f3 01       	movw	r30, r6
 986:	e8 0d       	add	r30, r8
 988:	f1 1d       	adc	r31, r1
 98a:	80 81       	ld	r24, Z
 98c:	b6 01       	movw	r22, r12
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 994:	81 10       	cpse	r8, r1
 996:	f5 cf       	rjmp	.-22     	; 0x982 <__stack+0x123>
 998:	22 20       	and	r2, r2
 99a:	09 f4       	brne	.+2      	; 0x99e <__stack+0x13f>
 99c:	42 ce       	rjmp	.-892    	; 0x622 <vfprintf+0x24>
 99e:	b6 01       	movw	r22, r12
 9a0:	80 e2       	ldi	r24, 0x20	; 32
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <fputc>
 9a8:	2a 94       	dec	r2
 9aa:	f6 cf       	rjmp	.-20     	; 0x998 <__stack+0x139>
 9ac:	f6 01       	movw	r30, r12
 9ae:	86 81       	ldd	r24, Z+6	; 0x06
 9b0:	97 81       	ldd	r25, Z+7	; 0x07
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0x159>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2b 96       	adiw	r28, 0x0b	; 11
 9ba:	e2 e1       	ldi	r30, 0x12	; 18
 9bc:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__epilogue_restores__>

000009c0 <strnlen_P>:
 9c0:	fc 01       	movw	r30, r24
 9c2:	05 90       	lpm	r0, Z+
 9c4:	61 50       	subi	r22, 0x01	; 1
 9c6:	70 40       	sbci	r23, 0x00	; 0
 9c8:	01 10       	cpse	r0, r1
 9ca:	d8 f7       	brcc	.-10     	; 0x9c2 <strnlen_P+0x2>
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	8e 0f       	add	r24, r30
 9d2:	9f 1f       	adc	r25, r31
 9d4:	08 95       	ret

000009d6 <strnlen>:
 9d6:	fc 01       	movw	r30, r24
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 90       	ld	r0, Z+
 9de:	01 10       	cpse	r0, r1
 9e0:	d8 f7       	brcc	.-10     	; 0x9d8 <strnlen+0x2>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	8e 0f       	add	r24, r30
 9e8:	9f 1f       	adc	r25, r31
 9ea:	08 95       	ret

000009ec <fputc>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	fb 01       	movw	r30, r22
 9f6:	23 81       	ldd	r18, Z+3	; 0x03
 9f8:	21 fd       	sbrc	r18, 1
 9fa:	03 c0       	rjmp	.+6      	; 0xa02 <fputc+0x16>
 9fc:	8f ef       	ldi	r24, 0xFF	; 255
 9fe:	9f ef       	ldi	r25, 0xFF	; 255
 a00:	2c c0       	rjmp	.+88     	; 0xa5a <fputc+0x6e>
 a02:	22 ff       	sbrs	r18, 2
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <fputc+0x46>
 a06:	46 81       	ldd	r20, Z+6	; 0x06
 a08:	57 81       	ldd	r21, Z+7	; 0x07
 a0a:	24 81       	ldd	r18, Z+4	; 0x04
 a0c:	35 81       	ldd	r19, Z+5	; 0x05
 a0e:	42 17       	cp	r20, r18
 a10:	53 07       	cpc	r21, r19
 a12:	44 f4       	brge	.+16     	; 0xa24 <fputc+0x38>
 a14:	a0 81       	ld	r26, Z
 a16:	b1 81       	ldd	r27, Z+1	; 0x01
 a18:	9d 01       	movw	r18, r26
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	31 83       	std	Z+1, r19	; 0x01
 a20:	20 83       	st	Z, r18
 a22:	8c 93       	st	X, r24
 a24:	26 81       	ldd	r18, Z+6	; 0x06
 a26:	37 81       	ldd	r19, Z+7	; 0x07
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	37 83       	std	Z+7, r19	; 0x07
 a2e:	26 83       	std	Z+6, r18	; 0x06
 a30:	14 c0       	rjmp	.+40     	; 0xa5a <fputc+0x6e>
 a32:	8b 01       	movw	r16, r22
 a34:	ec 01       	movw	r28, r24
 a36:	fb 01       	movw	r30, r22
 a38:	00 84       	ldd	r0, Z+8	; 0x08
 a3a:	f1 85       	ldd	r31, Z+9	; 0x09
 a3c:	e0 2d       	mov	r30, r0
 a3e:	09 95       	icall
 a40:	89 2b       	or	r24, r25
 a42:	e1 f6       	brne	.-72     	; 0x9fc <fputc+0x10>
 a44:	d8 01       	movw	r26, r16
 a46:	16 96       	adiw	r26, 0x06	; 6
 a48:	8d 91       	ld	r24, X+
 a4a:	9c 91       	ld	r25, X
 a4c:	17 97       	sbiw	r26, 0x07	; 7
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	17 96       	adiw	r26, 0x07	; 7
 a52:	9c 93       	st	X, r25
 a54:	8e 93       	st	-X, r24
 a56:	16 97       	sbiw	r26, 0x06	; 6
 a58:	ce 01       	movw	r24, r28
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	08 95       	ret

00000a64 <__ultoa_invert>:
 a64:	fa 01       	movw	r30, r20
 a66:	aa 27       	eor	r26, r26
 a68:	28 30       	cpi	r18, 0x08	; 8
 a6a:	51 f1       	breq	.+84     	; 0xac0 <__ultoa_invert+0x5c>
 a6c:	20 31       	cpi	r18, 0x10	; 16
 a6e:	81 f1       	breq	.+96     	; 0xad0 <__ultoa_invert+0x6c>
 a70:	e8 94       	clt
 a72:	6f 93       	push	r22
 a74:	6e 7f       	andi	r22, 0xFE	; 254
 a76:	6e 5f       	subi	r22, 0xFE	; 254
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	af 4f       	sbci	r26, 0xFF	; 255
 a80:	b1 e0       	ldi	r27, 0x01	; 1
 a82:	3e d0       	rcall	.+124    	; 0xb00 <__ultoa_invert+0x9c>
 a84:	b4 e0       	ldi	r27, 0x04	; 4
 a86:	3c d0       	rcall	.+120    	; 0xb00 <__ultoa_invert+0x9c>
 a88:	67 0f       	add	r22, r23
 a8a:	78 1f       	adc	r23, r24
 a8c:	89 1f       	adc	r24, r25
 a8e:	9a 1f       	adc	r25, r26
 a90:	a1 1d       	adc	r26, r1
 a92:	68 0f       	add	r22, r24
 a94:	79 1f       	adc	r23, r25
 a96:	8a 1f       	adc	r24, r26
 a98:	91 1d       	adc	r25, r1
 a9a:	a1 1d       	adc	r26, r1
 a9c:	6a 0f       	add	r22, r26
 a9e:	71 1d       	adc	r23, r1
 aa0:	81 1d       	adc	r24, r1
 aa2:	91 1d       	adc	r25, r1
 aa4:	a1 1d       	adc	r26, r1
 aa6:	20 d0       	rcall	.+64     	; 0xae8 <__ultoa_invert+0x84>
 aa8:	09 f4       	brne	.+2      	; 0xaac <__ultoa_invert+0x48>
 aaa:	68 94       	set
 aac:	3f 91       	pop	r19
 aae:	2a e0       	ldi	r18, 0x0A	; 10
 ab0:	26 9f       	mul	r18, r22
 ab2:	11 24       	eor	r1, r1
 ab4:	30 19       	sub	r19, r0
 ab6:	30 5d       	subi	r19, 0xD0	; 208
 ab8:	31 93       	st	Z+, r19
 aba:	de f6       	brtc	.-74     	; 0xa72 <__ultoa_invert+0xe>
 abc:	cf 01       	movw	r24, r30
 abe:	08 95       	ret
 ac0:	46 2f       	mov	r20, r22
 ac2:	47 70       	andi	r20, 0x07	; 7
 ac4:	40 5d       	subi	r20, 0xD0	; 208
 ac6:	41 93       	st	Z+, r20
 ac8:	b3 e0       	ldi	r27, 0x03	; 3
 aca:	0f d0       	rcall	.+30     	; 0xaea <__ultoa_invert+0x86>
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x5c>
 ace:	f6 cf       	rjmp	.-20     	; 0xabc <__ultoa_invert+0x58>
 ad0:	46 2f       	mov	r20, r22
 ad2:	4f 70       	andi	r20, 0x0F	; 15
 ad4:	40 5d       	subi	r20, 0xD0	; 208
 ad6:	4a 33       	cpi	r20, 0x3A	; 58
 ad8:	18 f0       	brcs	.+6      	; 0xae0 <__ultoa_invert+0x7c>
 ada:	49 5d       	subi	r20, 0xD9	; 217
 adc:	31 fd       	sbrc	r19, 1
 ade:	40 52       	subi	r20, 0x20	; 32
 ae0:	41 93       	st	Z+, r20
 ae2:	02 d0       	rcall	.+4      	; 0xae8 <__ultoa_invert+0x84>
 ae4:	a9 f7       	brne	.-22     	; 0xad0 <__ultoa_invert+0x6c>
 ae6:	ea cf       	rjmp	.-44     	; 0xabc <__ultoa_invert+0x58>
 ae8:	b4 e0       	ldi	r27, 0x04	; 4
 aea:	a6 95       	lsr	r26
 aec:	97 95       	ror	r25
 aee:	87 95       	ror	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	ba 95       	dec	r27
 af6:	c9 f7       	brne	.-14     	; 0xaea <__ultoa_invert+0x86>
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	61 05       	cpc	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	08 95       	ret
 b00:	9b 01       	movw	r18, r22
 b02:	ac 01       	movw	r20, r24
 b04:	0a 2e       	mov	r0, r26
 b06:	06 94       	lsr	r0
 b08:	57 95       	ror	r21
 b0a:	47 95       	ror	r20
 b0c:	37 95       	ror	r19
 b0e:	27 95       	ror	r18
 b10:	ba 95       	dec	r27
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__ultoa_invert+0xa2>
 b14:	62 0f       	add	r22, r18
 b16:	73 1f       	adc	r23, r19
 b18:	84 1f       	adc	r24, r20
 b1a:	95 1f       	adc	r25, r21
 b1c:	a0 1d       	adc	r26, r0
 b1e:	08 95       	ret

00000b20 <__prologue_saves__>:
 b20:	2f 92       	push	r2
 b22:	3f 92       	push	r3
 b24:	4f 92       	push	r4
 b26:	5f 92       	push	r5
 b28:	6f 92       	push	r6
 b2a:	7f 92       	push	r7
 b2c:	8f 92       	push	r8
 b2e:	9f 92       	push	r9
 b30:	af 92       	push	r10
 b32:	bf 92       	push	r11
 b34:	cf 92       	push	r12
 b36:	df 92       	push	r13
 b38:	ef 92       	push	r14
 b3a:	ff 92       	push	r15
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	ca 1b       	sub	r28, r26
 b4a:	db 0b       	sbc	r29, r27
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
 b56:	09 94       	ijmp

00000b58 <__epilogue_restores__>:
 b58:	2a 88       	ldd	r2, Y+18	; 0x12
 b5a:	39 88       	ldd	r3, Y+17	; 0x11
 b5c:	48 88       	ldd	r4, Y+16	; 0x10
 b5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b60:	6e 84       	ldd	r6, Y+14	; 0x0e
 b62:	7d 84       	ldd	r7, Y+13	; 0x0d
 b64:	8c 84       	ldd	r8, Y+12	; 0x0c
 b66:	9b 84       	ldd	r9, Y+11	; 0x0b
 b68:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6a:	b9 84       	ldd	r11, Y+9	; 0x09
 b6c:	c8 84       	ldd	r12, Y+8	; 0x08
 b6e:	df 80       	ldd	r13, Y+7	; 0x07
 b70:	ee 80       	ldd	r14, Y+6	; 0x06
 b72:	fd 80       	ldd	r15, Y+5	; 0x05
 b74:	0c 81       	ldd	r16, Y+4	; 0x04
 b76:	1b 81       	ldd	r17, Y+3	; 0x03
 b78:	aa 81       	ldd	r26, Y+2	; 0x02
 b7a:	b9 81       	ldd	r27, Y+1	; 0x01
 b7c:	ce 0f       	add	r28, r30
 b7e:	d1 1d       	adc	r29, r1
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	f8 94       	cli
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	cd bf       	out	0x3d, r28	; 61
 b8a:	ed 01       	movw	r28, r26
 b8c:	08 95       	ret

00000b8e <_exit>:
 b8e:	f8 94       	cli

00000b90 <__stop_program>:
 b90:	ff cf       	rjmp	.-2      	; 0xb90 <__stop_program>
